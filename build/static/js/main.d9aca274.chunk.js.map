{"version":3,"sources":["config.js","PlaylistContext.js","Landingpage/Landing.js","Homepage/GenreCheck.js","ValidationError.js","Homepage/Homepage.js","Playlists/Song.js","Nav.js","Playlists/Playlist-Display.js","App.js","index.js"],"names":["require","config","module","exports","ENDPOINT","PlaylistContext","React","createContext","genres","playlists","pageUpdate","Landing","id","to","Component","genreChecks","props","toggleClick","e","clickE","state","name","this","selected","key","className","htmlFor","checked","selectedGen","type","value","ValidationError","message","console","log","HomePage","_isMounted","fieldChange","setState","selectedId","target","titleChange","title","titleTouch","minChange","min","parseInt","minTouch","hourChange","hour","hourTouch","minArr","arr","Array","i","hourArr","validateTime","hourSelect","minSelect","isNaN","validateGenre","validateTitle","titleInput","trim","length","subHandle","preventDefault","time","newPlaylist","genre_id","author","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","history","push","catch","error","genTouch","Consumer","map","genre","minutes","hours","timeError","genreError","titleError","onChange","onClick","disabled","Song","timeOut","Math","floor","sec","toFixed","msConverter","track","artistOut","artist","join","href","url","Nav","playlistOut","slice","reverse","playlist","find","exact","output","PlaylistDisplay","setPlaylistId","playlistId","setPlaylist","addSongs","song","songs","match","params","isFlushed","res2","rand","random","fetData","qString","res3","response","tracks","runtime","chosen","trackChoice","includes","artists","items","external_urls","spotify","duration_ms","explicit","error3","error2","nextProps","songDisplay","clicker","App","user","setGenres","setPlaylists","fetcher","endpoint","all","playlistRes","genreRes","authRes","auth","contextValue","Provider","path","component","Homepage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9aca274.chunk.js","sourcesContent":["require('dotenv').config()\nmodule.exports = {\n    ENDPOINT: \"http://localhost:8000/api\"\n}","import React from 'react'\nconst PlaylistContext = React.createContext({\n    genres: [],\n    playlists: [],\n    pageUpdate: () => { },\n})\nexport default PlaylistContext\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n// import PlaylistContext from '../PlaylistContext'\nimport './Landing.css'\n\n\nexport default class Landing extends Component {\n\n    render() {\n        return (\n            <div id=\"user-prompt\">\n                <h2>Welcome to playlist maker</h2>\n                <p>Looking to discover new music? Tired of your old study playlist? This app is for you just choose the genres and input the amount of time you would like the playlist to run and wait for your new playlist to be created.</p>\n                <Link to={'/homepage'}>ENTER!</Link><Link to={''}></Link>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class genreChecks extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: props.id,\n            name: props.name,\n        }\n    }\n\n    toggleClick = (e) => {\n        this.props.clickE(e, this.state.name)\n    }\n\n    render() {\n\n        if (this.props.selected === this.state.name)\n            return (\n                <label key={this.state.id} name={this.state.name} className=\"genre-option gen-selected\" htmlFor={this.state.id} checked={this.state.selectedGen === this.state.name}>\n                    {this.state.name}\n\n                    <input type=\"radio\" value={this.state.name} name=\"gen-option\" id={this.state.id} />\n                </label>\n            )\n\n        else\n            return (\n\n                <label key={this.state.id} name={this.state.name} className=\"genre-option\" htmlFor={this.state.id} checked={this.state.selectedGen === this.state.name}>\n                    {this.state.name}\n\n                    <input type=\"radio\" value={this.state.name} name=\"gen-option\" id={this.state.id} />\n                </label>\n                // </div>\n            )\n\n    }\n}","import React from 'react';\n\nexport default function ValidationError(props) {\n    if (props.message) {\n        console.log(props.message)\n        return (\n            <div className=\"error\">{props.message}</div>\n        );\n    }\n\n    return <></>\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport './Homepage.css'\nimport GenreCheck from './GenreCheck'\nimport ValidationError from '../ValidationError'\nimport config from '../config'\n\n\nexport default class HomePage extends Component {\n    _isMounted = false;\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: \"\",\n            titleTouch: false,\n            selectedId: null,\n            selectedGen: null,\n            genTouch: false,\n            hour: null,\n            hourTouch: false,\n            min: null,\n            minTouch: false,\n        }\n    }\n\n    fieldChange = e => {\n\n        this.setState({\n            selectedId: e.target.id,\n            selectedGen: e.target.value\n        })\n    }\n\n    titleChange = e => {\n        this.setState({\n            title: e.target.value,\n            titleTouch: true\n        })\n    }\n\n    minChange = e => {\n        this.setState({\n            min: parseInt(e.target.value),\n            minTouch: true\n        })\n    }\n\n    hourChange = e => {\n        this.setState({\n            hour: parseInt(e.target.value),\n            hourTouch: true\n        })\n    }\n\n    minArr = () => {\n        let arr = new Array(60);\n        for (let i = 0; i <= 59; i++)\n            arr[i] = i\n\n        return arr\n    }\n\n    hourArr = () => {\n        let arr = new Array(4);\n        for (let i = 0; i <= 2; i++)\n            arr[i] = i\n        return arr\n    }\n\n    validateTime = () => {\n        const hourSelect = this.state.hour\n        const minSelect = this.state.min\n        if ((hourSelect === null) || (minSelect === null) || isNaN(hourSelect) || isNaN(minSelect) || (hourSelect === 0 && minSelect === 0))\n            return \"Select a valid time\"\n    }\n\n    validateGenre = () => {\n        const genre = this.state.selectedId\n        if (genre === null)\n            return \"You must select a genre.\"\n        // if (genres.length > 1)\n        //     return \"Sorry only one genre can be selected at a time.\"\n    }\n\n    validateTitle = () => {\n        const titleInput = this.state.title.trim()\n        if (titleInput.length === 0) {\n            return \"Title is required.\"\n        } else if (titleInput.length < 3) {\n            return \"Title must be atleast 3 characters long.\"\n        }\n    }\n\n    subHandle = (e, value) => {\n        e.preventDefault();\n        let time = (3600000 * this.state.hour) + (60000 * this.state.min)\n        let newPlaylist = {\n            title: this.state.title.trim(),\n            length: time,\n            genre_id: this.state.selectedId,\n            author: 1\n        }\n\n\n        fetch(`${config.ENDPOINT}/playlists`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(newPlaylist),\n        })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(res => {\n\n                value.pageUpdate()\n                this.props.history.push(`/playlist-display/${res.id}`,\n                    {\n                        genres: value.genres,\n                        time: time\n                    }\n                )\n            })\n            .catch(error => {\n                console.error({ error })\n            })\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    render() {\n\n        return (\n            <PlaylistContext.Consumer>\n                {(value) => {\n\n                    let genres = value.genres.map(genre =>\n                        <GenreCheck id={genre.id} name={genre.name} selected={this.state.selectedGen} key={genre.id} />\n                    )\n\n                    let minutes = this.minArr().map(min => {\n                        if (min < 10)\n                            return <option value={min} key={min}>0{min}</option>\n                        else\n                            return <option value={min} key={min}>{min}</option>\n                    })\n\n                    let hours = this.hourArr().map(min => {\n                        return <option value={min} key={min}>{min}</option>\n                    })\n\n                    const timeError = this.validateTime()\n                    const genreError = this.validateGenre()\n                    const titleError = this.validateTitle()\n\n                    return genres && (\n                        <div id=\"play-stage\">\n                            <form>\n                                <div id=\"input-wrap\">\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"title-input\">Playlist Name: </label>\n                                        <input type=\"text\" id=\"title-input\" onChange={this.titleChange} className=\"user-inputs\" />\n                                        {this.state.titleTouch && <ValidationError message={titleError} />}\n                                    </div>\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"hour-length\">Playlist length: </label>\n                                        <select onChange={this.hourChange} className=\"user-inputs\">\n                                            <option value={null}>--Hour(s)--</option>\n                                            {hours}\n                                        </select>\n                                    :\n                                    <select onChange={this.minChange} className=\"user-inputs\">\n                                            <option value={null}>--Minute(s)--</option>\n                                            {minutes}\n                                        </select>\n                                        {(this.state.hourTouch && this.state.minTouch) && <ValidationError message={timeError} />}\n                                    </div>\n                                </div>\n                                <fieldset onChange={this.fieldChange}>\n                                    <legend>Choose your genre!</legend>\n                                    {(this.state.genTouch && <ValidationError message={genreError} />)}\n                                    <div id=\"genres\">\n                                        {genres}\n                                    </div>\n                                </fieldset>\n                                <button type=\"submit\" id=\"create\" onClick={e => this.subHandle(e, value)} disabled={timeError || genreError || titleError}>Create your playlist!</button>\n                            </form>\n                            <Link to={'/playlist-display/3'} >Here</Link>\n                        </div>\n                    )\n                }\n                }\n            </PlaylistContext.Consumer >\n\n        )\n    }\n}","import React from 'react'\nimport './Song.css'\nimport { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport PropTypes from 'prop-types'\nimport config from '../config'\n\nexport default function Song(props) {\n    // let date = <Moment format=\"Do of MMM YYYY\">\n    //     {props.mod}\n    // </Moment>\n\n    // let handleClickDelete = (value) => {\n    //     const noteId = props.id\n    //     fetch(`${config.note_end}/${noteId}`, {\n    //         method: 'DELETE',\n    //         headers: {\n    //             'content-type': 'application/json'\n    //         },\n    //     })\n    //         .then(res => {\n    //             if (!res.ok)\n    //                 return res.json().then(e => Promise.reject(e))\n    //             // return res.json()\n    //         })\n    //         .then(() => {\n    //             value.deleteNote(noteId)\n    //         })\n    //         .catch(error => {\n    //             console.error({ error })\n    //         })\n\n    //     if (props.history)\n    //         props.history.push('/')\n    // }\n\n    let msConverter = (length) => {\n        var min = Math.floor(length / 60000);\n        var sec = ((length % 60000) / 1000).toFixed(0);\n        return min + \":\" + (sec < 10 ? '0' : '') + sec;\n    }\n\n    let timeOut = msConverter(props.track.length)\n    let artistOut = props.track.artist.join(', ')\n    return (\n        // <NoteContext.Consumer>\n        // {(value) => {\n        // return (\n        <a target='_blank' href={props.track.url}>\n            <div className=\"song-item\">\n                {/* <Link to={} className=\"title\"> */}\n\n                <h3>{props.track.title}</h3>\n\n                <span className=\"artist\">by: {artistOut}</span>\n                <span id=\"time\">{timeOut}</span>\n                {/* </Link> */}\n                {/* <p>{\"Date modified on \"}{date}</p> */}\n                {/* <button className=\"delete\" onClick={() => handleClickDelete(value)}>Delete Note</button> */}\n\n                <hr />\n            </div>\n\n        </a>\n        // )\n        // }\n        // }\n        // </NoteContext.Consumer>\n    )\n}\n\n// Note.propTypes = {\n//     id: PropTypes.number,\n//     name: PropTypes.string,\n//     content: PropTypes.string,\n//     mod: PropTypes.string,\n// } \n","import React from 'react'\nimport { NavLink, Link } from 'react-router-dom'\nimport './Nav.css'\nimport PropTypes from 'prop-types'\nimport PlaylistContext from './PlaylistContext'\nimport PlaylistDisplay from './Playlists/Playlist-Display'\n\nexport default function Nav(props) {\n    // console.log(props)\n\n    let output = (value) => {\n        // console.log(value)\n\n\n\n        return value.playlists.slice(value.playlists.length - 11, value.playlists.length - 1).reverse().map(playlist => {\n            let genre = value.genres.find(genre => {\n                return genre.id === playlist.genre_id\n            })\n\n            return genre && (\n                <Link exact=\"true\" key={playlist.id} to={`/playlist-display/${playlist.id}`}>\n                    <article className=\"navLink\">\n                        <h3 id={playlist.id} >{playlist.title}</h3>\n                        <span>Genre:{genre.name}</span>\n                    </article>\n                </Link>\n            )\n        })\n    };\n\n\n    return (\n        <PlaylistContext.Consumer>\n            {(value) => {\n                let playlistOut = output(value)\n                return playlistOut && (\n                    <div id=\"navBar\">\n                        <h2 id=\"recent\">Most Recent</h2>\n                        {playlistOut}\n                        <Link to={'/homepage'}  >\n                            <h3 className=\"addFolder\">Add folder</h3>\n                        </Link>\n                    </div>\n                )\n\n            }\n            }\n        </PlaylistContext.Consumer>\n\n    )\n}\n","import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\nimport Song from './Song'\nimport Nav from '../Nav'\nimport './Playlist-Display.css'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlistId: this.props.match.params.playlistId,\n            playlist: null,\n            songs: [],\n            isFlushed: false\n        }\n\n    }\n\n    setPlaylistId = (playlistId) => {\n        this.setState({ playlistId })\n    }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    addSongs = (song) => {\n        this.setState({\n            songs: [...this.state.songs, song]\n        })\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        let playlistId = this.props.match.params.playlistId\n        console.log(playlistId)\n        if (this._isMounted) {\n            fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n                {\n                    method: 'GET',\n                    headers: {\n                        'content-type': 'application/json'\n                    }\n                })\n                .then(res => {\n                    if (!res.ok)\n                        return res.json().then(e => Promise.reject(e))\n                    return res.json()\n                })\n                .then(playlist => {\n                    console.log(playlist)\n                    this.setPlaylist(playlist)\n\n                    fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n                        {\n                            method: 'GET',\n                            headers: {\n                                'content-type': 'application/json'\n                            }\n                        })\n                        .then(res2 => {\n                            if (!res2.ok)\n                                return res2.json().then(e => Promise.reject(e))\n                            return res2.json()\n                        })\n                        .then(genre => {\n                            let rand = Math.floor(Math.random() * 1950);\n                            let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n\n                            let fetData = {\n                                qString: queryString,\n                            }\n\n                            fetch(`${config.ENDPOINT}/data`, {\n                                method: 'POST',\n                                headers: {\n                                    'content-type': 'application/json'\n                                },\n                                body: JSON.stringify(fetData),\n                            })\n                                .then(res3 => {\n                                    if (!res3.ok)\n                                        return res3.json().then(e => Promise.reject(e))\n                                    return res3.json()\n                                }).then(response => {\n                                    console.log(response.tracks)\n                                    let runtime = 0\n                                    let chosen = []\n\n                                    while (runtime < playlist.length) {\n\n                                        let trackChoice = Math.floor(Math.random() * 50);\n\n                                        if (!chosen.includes(trackChoice)) {\n                                            chosen.push(trackChoice)\n                                            let artists = []\n                                            for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++)\n                                                artists.push(response.tracks.items[trackChoice].artists[i].name)\n\n                                            let song = {\n                                                id: response.tracks.items[trackChoice].id,\n                                                url: response.tracks.items[trackChoice].external_urls.spotify,\n                                                title: response.tracks.items[trackChoice].name,\n                                                length: response.tracks.items[trackChoice].duration_ms,\n                                                explicit: response.tracks.items[trackChoice].explicit,\n                                                artist: artists\n                                            }\n                                            console.log(song)\n                                            runtime += song.length\n                                            this.addSongs(song)\n\n                                        }\n\n                                    }\n                                    console.log(runtime)\n\n                                }).catch(error3 => {\n                                    console.error({ error3 })\n                                })\n\n                        }).catch(error2 => {\n                            console.error({ error2 });\n                        });\n\n                })\n                .catch(error => {\n                    console.error({ error });\n                });\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log(nextProps.match.params)\n        if (this.state.playlist)\n            if (nextProps.match.params.playlistId === this.state.playlistId) {\n                return;\n            } else {\n                this.setState({ playlistId: nextProps.match.params.playlistId })\n                // this.componentDidMount()\n                // this.render()\n            }\n\n        else {\n            this.setState({ playlistId: nextProps.match.params.playlistId })\n            // this.componentDidMount()\n            // this.render()\n        }\n    }\n\n\n    render() {\n        if (this.state.playlist === null) return <h1>Loading..</h1>;\n\n        let songDisplay = this.state.songs.map(song => {\n            return <Song track={song} key={song.id} />\n        })\n        return (\n\n            <div id=\"playlistDisplay\">\n                <div id=\"nav\">\n                    <Nav clicker={this.setPlaylistId} />\n                </div>\n                <div id=\"playlistContent\">\n\n                    <h2 id=\"playlist-title\">{this.state.playlist.title}</h2>\n                    {songDisplay}\n\n                    {/* <NoteError> */}\n                    {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                    {/* <p></p> */}\n                    {/* </NoteError> */}\n                    {/* </article> */}\n                </div>\n\n            </div>\n            // )\n            // {/* } */}\n            // }\n            // {/* </PlaylistContext.Consumer > */}\n        )\n\n    }\n}\n","import React, { Component } from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\nimport config from './config';\nimport PlaylistContext from './PlaylistContext'\nimport Landing from './Landingpage/Landing'\nimport Homepage from './Homepage/Homepage'\nimport PlaylistDisplay from './Playlists/Playlist-Display'\n\nclass App extends Component {\n\n  state = {\n    genres: [],\n    playlists: [],\n    // records: [],\n    user: null,\n    error: null,\n  }\n\n  setGenres = genres => {\n    this.setState({\n      genres\n    })\n  }\n\n  setPlaylists = playlists => {\n    this.setState({\n      playlists\n    })\n  }\n\n  fetcher = () => {\n    let endpoint = config.ENDPOINT\n    Promise.all([\n      fetch(endpoint + '/playlists'),\n      fetch(endpoint + '/genres'),\n\n      fetch(endpoint + '/auth')\n    ],\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n        },\n      })\n      .then(([playlistRes, genreRes, authRes]) => {\n        if (!playlistRes.ok)\n          return playlistRes.json().then(error => Promise.reject(error))\n        if (!genreRes.ok)\n          return genreRes.json().then(error => Promise.reject(error))\n        if (!authRes.ok)\n          return authRes.json().then(error => Promise.reject(error))\n        return Promise.all([playlistRes.json(), genreRes.json(), authRes.json()])\n      })\n      .then(([playlist, genres, auth]) => {\n        this.setPlaylists(playlist)\n        this.setGenres(genres)\n        console.log(auth)\n      })\n      .catch(error => {\n        console.error({ error });\n      });\n  }\n\n  componentDidMount() {\n    this.fetcher()\n  }\n\n  // pageUpdate = () => {\n  //   this.componentDidMount()\n  // }\n\n  render() {\n    const contextValue = {\n      genres: this.state.genres,\n      playlists: this.state.playlists,\n      pageUpdate: this.fetcher,\n    }\n\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <Link to={'/'} id=\"home-link\">\n            <h1>ShowTunes</h1>\n          </Link>\n          <hr />\n        </header>\n        <PlaylistContext.Provider value={contextValue}>\n          <main id=\"stage\">\n            <Switch>\n              <Route exact path='/' component={Landing} />\n              <Route path='/homepage' component={Homepage} />\n              <Route path='/existing-playlists' component={Homepage} />\n              <Route path='/playlist-display/:playlistId' component={PlaylistDisplay} />\n            </Switch>\n          </main>\n        </PlaylistContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}