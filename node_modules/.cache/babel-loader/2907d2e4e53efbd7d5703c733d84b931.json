{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config';\nimport Song from './Song';\nimport Nav from '../Nav';\nimport PlaylistRender from './Playlist-Render'; // import './Playlist-Display.css'\n// import './Landing.css'\n\nexport default class PlaylistDisplay extends Component {\n  // _isMounted = false;\n  constructor(props) {\n    super(props);\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.addSongs = song => {\n      this.setState({\n        songs: [...this.state.songs, song]\n      });\n    };\n\n    this.state = {\n      playlist: null,\n      songs: [],\n      isFlushed: false\n    };\n  }\n\n  componentDidMount() {} // this._isMounted = true;\n  // let playlistId = this.props.match.params.playlistId\n  // console.log(playlistId)\n  // if (this._isMounted) {\n  //     fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n  //         {\n  //             method: 'GET',\n  //             headers: {\n  //                 'content-type': 'application/json'\n  //             }\n  //         })\n  //         .then(res => {\n  //             if (!res.ok)\n  //                 return res.json().then(e => Promise.reject(e))\n  //             return res.json()\n  //         })\n  //         .then(playlist => {\n  //             console.log(playlist)\n  //             this.setPlaylist(playlist)\n  //             fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n  //                 {\n  //                     method: 'GET',\n  //                     headers: {\n  //                         'content-type': 'application/json'\n  //                     }\n  //                 })\n  //                 .then(res2 => {\n  //                     if (!res2.ok)\n  //                         return res2.json().then(e => Promise.reject(e))\n  //                     return res2.json()\n  //                 })\n  //                 .then(genre => {\n  //                     let rand = Math.floor(Math.random() * 1950);\n  //                     let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n  //                     let fetData = {\n  //                         qString: queryString,\n  //                     }\n  //                     fetch(`${config.ENDPOINT}/data`, {\n  //                         method: 'POST',\n  //                         headers: {\n  //                             'content-type': 'application/json'\n  //                         },\n  //                         body: JSON.stringify(fetData),\n  //                     })\n  //                         .then(res3 => {\n  //                             if (!res3.ok)\n  //                                 return res3.json().then(e => Promise.reject(e))\n  //                             return res3.json()\n  //                         }).then(response => {\n  //                             console.log(response.tracks)\n  //                             let runtime = 0\n  //                             let chosen = []\n  //                             while (runtime < playlist.length) {\n  //                                 let trackChoice = Math.floor(Math.random() * 50);\n  //                                 if (!chosen.includes(trackChoice)) {\n  //                                     chosen.push(trackChoice)\n  //                                     let artists = []\n  //                                     for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++)\n  //                                         artists.push(response.tracks.items[trackChoice].artists[i].name)\n  //                                     let song = {\n  //                                         id: response.tracks.items[trackChoice].id,\n  //                                         url: response.tracks.items[trackChoice].external_urls.spotify,\n  //                                         title: response.tracks.items[trackChoice].name,\n  //                                         length: response.tracks.items[trackChoice].duration_ms,\n  //                                         explicit: response.tracks.items[trackChoice].explicit,\n  //                                         artist: artists\n  //                                     }\n  //                                     console.log(song)\n  //                                     runtime += song.length\n  //                                     this.addSongs(song)\n  //                                 }\n  //                             }\n  //                             console.log(runtime)\n  //                         }).catch(error3 => {\n  //                             console.error({ error3 })\n  //                         })\n  //                 }).catch(error2 => {\n  //                     console.error({ error2 });\n  //                 });\n  //         })\n  //         .catch(error => {\n  //             console.error({ error });\n  //         });\n  // }\n  // componentWillReceiveProps(nextProps) {\n  //     console.log(nextProps.match.params)\n  //     if (this.state.playlist)\n  //         if (nextProps.match.params.playlistId === this.state.playlist.id) {\n  //             return;\n  //         } else {\n  //             // this.componentDidMount()\n  //             this.render()\n  //         }\n  // }\n\n\n  render() {\n    // if (this.state.playlist === null) return null;\n    // let songDisplay = this.state.songs.map(song => {\n    //     return <Song track={song} key={song.id} />\n    // })\n    return /*#__PURE__*/React.createElement(PlaylistRender, {\n      id: this.props.match.params.playlistId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }) //     <div id=\"playlistDisplay\">\n    //         <div id=\"nav\">\n    //             <Nav clicker={this.componentDidMount} />\n    //         </div>\n    //         <div id=\"playlistContent\">\n    //             <h2>{this.state.playlist.title}</h2>\n    //             {songDisplay}\n    //             {/* <NoteError> */}\n    //             {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n    //             {/* <p></p> */}\n    //             {/* </NoteError> */}\n    //             {/* </article> */}\n    //         </div>\n    //     </div>\n    // )\n    // {/* } */}\n    // }\n    // {/* </PlaylistContext.Consumer > */}\n    ;\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js"],"names":["React","Component","Link","withRouter","PlaylistContext","config","Song","Nav","PlaylistRender","PlaylistDisplay","constructor","props","setPlaylist","playlist","setState","addSongs","song","songs","state","isFlushed","componentDidMount","render","match","params","playlistId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,cAAP,MAA2B,mBAA3B,C,CACA;AACA;;AAGA,eAAe,MAAMC,eAAN,SAA8BR,SAA9B,CAAwC;AACnD;AAEAS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAWnBC,WAXmB,GAWJC,QAAD,IAAc;AACxB,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACH,KAbkB;;AAAA,SAenBE,QAfmB,GAePC,IAAD,IAAU;AACjB,WAAKF,QAAL,CAAc;AACVG,QAAAA,KAAK,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,KAAf,EAAsBD,IAAtB;AADG,OAAd;AAGH,KAnBkB;;AAGf,SAAKE,KAAL,GAAa;AACTL,MAAAA,QAAQ,EAAE,IADD;AAETI,MAAAA,KAAK,EAAE,EAFE;AAGTE,MAAAA,SAAS,EAAE;AAHF,KAAb;AAMH;;AAYDC,EAAAA,iBAAiB,GAAG,CAqGnB,CArGgB,CACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAC,EAAAA,MAAM,GAAG;AACL;AAGA;AACA;AACA;AACA,wBACI,oBAAC,cAAD;AAAgB,MAAA,EAAE,EAAE,KAAKV,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBC,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAEI;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAtBJ;AAyBH;;AA3KkD","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\nimport Song from './Song'\nimport Nav from '../Nav'\nimport PlaylistRender from './Playlist-Render'\n// import './Playlist-Display.css'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n    // _isMounted = false;\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlist: null,\n            songs: [],\n            isFlushed: false\n        }\n\n    }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    addSongs = (song) => {\n        this.setState({\n            songs: [...this.state.songs, song]\n        })\n    }\n\n    componentDidMount() {\n        // this._isMounted = true;\n        // let playlistId = this.props.match.params.playlistId\n        // console.log(playlistId)\n        // if (this._isMounted) {\n        //     fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n        //         {\n        //             method: 'GET',\n        //             headers: {\n        //                 'content-type': 'application/json'\n        //             }\n        //         })\n        //         .then(res => {\n        //             if (!res.ok)\n        //                 return res.json().then(e => Promise.reject(e))\n        //             return res.json()\n        //         })\n        //         .then(playlist => {\n        //             console.log(playlist)\n        //             this.setPlaylist(playlist)\n\n        //             fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n        //                 {\n        //                     method: 'GET',\n        //                     headers: {\n        //                         'content-type': 'application/json'\n        //                     }\n        //                 })\n        //                 .then(res2 => {\n        //                     if (!res2.ok)\n        //                         return res2.json().then(e => Promise.reject(e))\n        //                     return res2.json()\n        //                 })\n        //                 .then(genre => {\n        //                     let rand = Math.floor(Math.random() * 1950);\n        //                     let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n\n        //                     let fetData = {\n        //                         qString: queryString,\n        //                     }\n\n        //                     fetch(`${config.ENDPOINT}/data`, {\n        //                         method: 'POST',\n        //                         headers: {\n        //                             'content-type': 'application/json'\n        //                         },\n        //                         body: JSON.stringify(fetData),\n        //                     })\n        //                         .then(res3 => {\n        //                             if (!res3.ok)\n        //                                 return res3.json().then(e => Promise.reject(e))\n        //                             return res3.json()\n        //                         }).then(response => {\n        //                             console.log(response.tracks)\n        //                             let runtime = 0\n        //                             let chosen = []\n\n        //                             while (runtime < playlist.length) {\n\n        //                                 let trackChoice = Math.floor(Math.random() * 50);\n\n        //                                 if (!chosen.includes(trackChoice)) {\n        //                                     chosen.push(trackChoice)\n        //                                     let artists = []\n        //                                     for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++)\n        //                                         artists.push(response.tracks.items[trackChoice].artists[i].name)\n\n        //                                     let song = {\n        //                                         id: response.tracks.items[trackChoice].id,\n        //                                         url: response.tracks.items[trackChoice].external_urls.spotify,\n        //                                         title: response.tracks.items[trackChoice].name,\n        //                                         length: response.tracks.items[trackChoice].duration_ms,\n        //                                         explicit: response.tracks.items[trackChoice].explicit,\n        //                                         artist: artists\n        //                                     }\n        //                                     console.log(song)\n        //                                     runtime += song.length\n        //                                     this.addSongs(song)\n\n        //                                 }\n\n        //                             }\n        //                             console.log(runtime)\n\n        //                         }).catch(error3 => {\n        //                             console.error({ error3 })\n        //                         })\n\n\n\n\n        //                 }).catch(error2 => {\n        //                     console.error({ error2 });\n        //                 });\n\n        //         })\n        //         .catch(error => {\n        //             console.error({ error });\n        //         });\n        // }\n\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     console.log(nextProps.match.params)\n    //     if (this.state.playlist)\n    //         if (nextProps.match.params.playlistId === this.state.playlist.id) {\n    //             return;\n    //         } else {\n    //             // this.componentDidMount()\n    //             this.render()\n    //         }\n    // }\n\n\n    render() {\n        // if (this.state.playlist === null) return null;\n\n\n        // let songDisplay = this.state.songs.map(song => {\n        //     return <Song track={song} key={song.id} />\n        // })\n        return (\n            <PlaylistRender id={this.props.match.params.playlistId} />\n            //     <div id=\"playlistDisplay\">\n            //         <div id=\"nav\">\n            //             <Nav clicker={this.componentDidMount} />\n            //         </div>\n            //         <div id=\"playlistContent\">\n\n            //             <h2>{this.state.playlist.title}</h2>\n            //             {songDisplay}\n\n            //             {/* <NoteError> */}\n            //             {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n            //             {/* <p></p> */}\n            //             {/* </NoteError> */}\n            //             {/* </article> */}\n            //         </div>\n\n            //     </div>\n            // )\n            // {/* } */}\n            // }\n            // {/* </PlaylistContext.Consumer > */}\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}