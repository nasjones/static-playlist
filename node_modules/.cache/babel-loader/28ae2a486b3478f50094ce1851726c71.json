{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Homepage/Homepage.js\";\nimport React, { Component } from 'react'; // import { Link } from 'react-router-dom'\n\nimport PlaylistContext from '../PlaylistContext';\nimport './Homepage.css';\nimport GenreCheck from './GenreCheck';\nimport ValidationError from '../ValidationError';\nimport config from '../config';\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.fieldChange = e => {\n      this.setState({\n        selectedId: e.target.id,\n        selectedGen: e.target.value\n      });\n    };\n\n    this.titleChange = e => {\n      this.setState({\n        title: e.target.value,\n        titleTouch: true\n      });\n    };\n\n    this.minChange = e => {\n      this.setState({\n        min: parseInt(e.target.value),\n        minTouch: true\n      });\n    };\n\n    this.hourChange = e => {\n      this.setState({\n        hour: parseInt(e.target.value),\n        hourTouch: true\n      });\n    };\n\n    this.minArr = () => {\n      let arr = new Array(60);\n\n      for (let i = 0; i <= 59; i++) arr[i] = i;\n\n      return arr;\n    };\n\n    this.hourArr = () => {\n      let arr = new Array(4);\n\n      for (let i = 0; i <= 2; i++) arr[i] = i;\n\n      return arr;\n    };\n\n    this.validateTime = () => {\n      const hourSelect = this.state.hour;\n      const minSelect = this.state.min;\n      if (hourSelect === null || minSelect === null || isNaN(hourSelect) || isNaN(minSelect) || hourSelect === 0 && minSelect === 0) return \"Select a valid time\";\n    };\n\n    this.validateGenre = () => {\n      const genre = this.state.selectedId;\n      if (genre === null) return \"You must select a genre.\"; // if (genres.length > 1)\n      //     return \"Sorry only one genre can be selected at a time.\"\n    };\n\n    this.validateTitle = () => {\n      const titleInput = this.state.title.trim();\n\n      if (titleInput.length === 0) {\n        return \"Title is required.\";\n      } else if (titleInput.length < 3) {\n        return \"Title must be atleast 3 characters long.\";\n      }\n    };\n\n    this.subHandle = (e, value) => {\n      e.preventDefault();\n      let time = 3600000 * this.state.hour + 60000 * this.state.min;\n      let newPlaylist = {\n        title: this.state.title.trim(),\n        length: time,\n        genre_id: this.state.selectedId,\n        author: 1\n      };\n      fetch(`${config.ENDPOINT}/playlists`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(newPlaylist)\n      }).then(res => {\n        if (!res.ok) return res.json().then(e => Promise.reject(e));\n        return res.json();\n      }).then(res => {\n        value.pageUpdate();\n        this.props.history.push(`/playlist-display/${res.id}`, {\n          genres: value.genres,\n          time: time\n        });\n      }).catch(error => {\n        console.error({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      title: \"\",\n      titleTouch: false,\n      selectedId: null,\n      selectedGen: null,\n      genTouch: false,\n      hour: null,\n      hourTouch: false,\n      min: null,\n      minTouch: false\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PlaylistContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, value => {\n      let genres = value.genres.map(genre => /*#__PURE__*/React.createElement(GenreCheck, {\n        id: genre.id,\n        name: genre.name,\n        selected: this.state.selectedGen,\n        key: genre.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }));\n      let minutes = this.minArr().map(min => {\n        if (min < 10) return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 36\n          }\n        }, \"0\", min);else return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 36\n          }\n        }, min);\n      });\n      let hours = this.hourArr().map(min => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 32\n          }\n        }, min);\n      });\n      const timeError = this.validateTime();\n      const genreError = this.validateGenre();\n      const titleError = this.validateTitle();\n      return genres && /*#__PURE__*/React.createElement(\"div\", {\n        id: \"play-stage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"input-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"title-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 41\n        }\n      }, \"Playlist Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        id: \"title-input\",\n        onChange: this.titleChange,\n        className: \"user-inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 41\n        }\n      }), this.state.titleTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: titleError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 67\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"hour-length\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 41\n        }\n      }, \"Playlist length: \"), /*#__PURE__*/React.createElement(\"select\", {\n        onChange: this.hourChange,\n        className: \"user-inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 45\n        }\n      }, \"--Hour(s)--\"), hours), \":\", /*#__PURE__*/React.createElement(\"select\", {\n        onChange: this.minChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 45\n        }\n      }, \"--Minute(s)--\"), minutes), this.state.hourTouch && this.state.minTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: timeError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 91\n        }\n      }))), /*#__PURE__*/React.createElement(\"fieldset\", {\n        onChange: this.fieldChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 37\n        }\n      }, \"Choose your genre!\"), this.state.genTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: genreError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 62\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"genres\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 37\n        }\n      }, genres)), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        id: \"create\",\n        onClick: e => this.subHandle(e, value),\n        disabled: timeError || genreError || titleError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 33\n        }\n      }, \"Create your playlist!\")));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Homepage/Homepage.js"],"names":["React","Component","PlaylistContext","GenreCheck","ValidationError","config","HomePage","constructor","props","_isMounted","fieldChange","e","setState","selectedId","target","id","selectedGen","value","titleChange","title","titleTouch","minChange","min","parseInt","minTouch","hourChange","hour","hourTouch","minArr","arr","Array","i","hourArr","validateTime","hourSelect","state","minSelect","isNaN","validateGenre","genre","validateTitle","titleInput","trim","length","subHandle","preventDefault","time","newPlaylist","genre_id","author","fetch","ENDPOINT","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","pageUpdate","history","push","genres","catch","error","console","genTouch","componentDidMount","componentWillUnmount","render","map","name","minutes","hours","timeError","genreError","titleError"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport './Homepage.css'\nimport GenreCheck from './GenreCheck'\nimport ValidationError from '../ValidationError'\nimport config from '../config'\n\n\nexport default class HomePage extends Component {\n    _isMounted = false;\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: \"\",\n            titleTouch: false,\n            selectedId: null,\n            selectedGen: null,\n            genTouch: false,\n            hour: null,\n            hourTouch: false,\n            min: null,\n            minTouch: false,\n        }\n    }\n\n    fieldChange = e => {\n\n        this.setState({\n            selectedId: e.target.id,\n            selectedGen: e.target.value\n        })\n    }\n\n    titleChange = e => {\n        this.setState({\n            title: e.target.value,\n            titleTouch: true\n        })\n    }\n\n    minChange = e => {\n        this.setState({\n            min: parseInt(e.target.value),\n            minTouch: true\n        })\n    }\n\n    hourChange = e => {\n        this.setState({\n            hour: parseInt(e.target.value),\n            hourTouch: true\n        })\n    }\n\n    minArr = () => {\n        let arr = new Array(60);\n        for (let i = 0; i <= 59; i++)\n            arr[i] = i\n\n        return arr\n    }\n\n    hourArr = () => {\n        let arr = new Array(4);\n        for (let i = 0; i <= 2; i++)\n            arr[i] = i\n        return arr\n    }\n\n    validateTime = () => {\n        const hourSelect = this.state.hour\n        const minSelect = this.state.min\n        if ((hourSelect === null) || (minSelect === null) || isNaN(hourSelect) || isNaN(minSelect) || (hourSelect === 0 && minSelect === 0))\n            return \"Select a valid time\"\n    }\n\n    validateGenre = () => {\n        const genre = this.state.selectedId\n        if (genre === null)\n            return \"You must select a genre.\"\n        // if (genres.length > 1)\n        //     return \"Sorry only one genre can be selected at a time.\"\n    }\n\n    validateTitle = () => {\n        const titleInput = this.state.title.trim()\n        if (titleInput.length === 0) {\n            return \"Title is required.\"\n        } else if (titleInput.length < 3) {\n            return \"Title must be atleast 3 characters long.\"\n        }\n    }\n\n    subHandle = (e, value) => {\n        e.preventDefault();\n        let time = (3600000 * this.state.hour) + (60000 * this.state.min)\n        let newPlaylist = {\n            title: this.state.title.trim(),\n            length: time,\n            genre_id: this.state.selectedId,\n            author: 1\n        }\n\n\n        fetch(`${config.ENDPOINT}/playlists`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(newPlaylist),\n        })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(res => {\n\n                value.pageUpdate()\n                this.props.history.push(`/playlist-display/${res.id}`,\n                    {\n                        genres: value.genres,\n                        time: time\n                    }\n                )\n            })\n            .catch(error => {\n                console.error({ error })\n            })\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    render() {\n\n        return (\n            <PlaylistContext.Consumer>\n                {(value) => {\n\n                    let genres = value.genres.map(genre =>\n                        <GenreCheck id={genre.id} name={genre.name} selected={this.state.selectedGen} key={genre.id} />\n                    )\n\n                    let minutes = this.minArr().map(min => {\n                        if (min < 10)\n                            return <option value={min} key={min}>0{min}</option>\n                        else\n                            return <option value={min} key={min}>{min}</option>\n                    })\n\n                    let hours = this.hourArr().map(min => {\n                        return <option value={min} key={min}>{min}</option>\n                    })\n\n                    const timeError = this.validateTime()\n                    const genreError = this.validateGenre()\n                    const titleError = this.validateTitle()\n\n                    return genres && (\n                        <div id=\"play-stage\">\n                            <form>\n                                <div id=\"input-wrap\">\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"title-input\">Playlist Name: </label>\n                                        <input type=\"text\" id=\"title-input\" onChange={this.titleChange} className=\"user-inputs\" />\n                                        {this.state.titleTouch && <ValidationError message={titleError} />}\n                                    </div>\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"hour-length\">Playlist length: </label>\n                                        <select onChange={this.hourChange} className=\"user-inputs\">\n                                            <option value={null}>--Hour(s)--</option>\n                                            {hours}\n                                        </select>\n                                    :\n                                    <select onChange={this.minChange}>\n                                            <option value={null}>--Minute(s)--</option>\n                                            {minutes}\n                                        </select>\n                                        {(this.state.hourTouch && this.state.minTouch) && <ValidationError message={timeError} />}\n                                    </div>\n                                </div>\n                                <fieldset onChange={this.fieldChange}>\n                                    <legend>Choose your genre!</legend>\n                                    {(this.state.genTouch && <ValidationError message={genreError} />)}\n                                    <div id=\"genres\">\n                                        {genres}\n                                    </div>\n                                </fieldset>\n                                <button type=\"submit\" id=\"create\" onClick={e => this.subHandle(e, value)} disabled={timeError || genreError || titleError}>Create your playlist!</button>\n                            </form>\n                        </div>\n                    )\n                }\n                }\n            </PlaylistContext.Consumer >\n\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}