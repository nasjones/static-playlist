{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/App.js\";\nimport React, { Component } from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\nimport config from './config';\nimport PlaylistContext from './PlaylistContext';\nimport Landing from './Landingpage/Landing';\nimport Homepage from './Homepage/Homepage';\nimport PlaylistDisplay from './Playlists/Playlist-Display';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      genres: [],\n      playlists: [],\n      records: [],\n      user: null,\n      error: null\n    };\n\n    this.setGenres = genres => {\n      this.setState({\n        genres\n      });\n    };\n\n    this.setPlaylists = playlists => {\n      this.setState({\n        playlists\n      });\n    };\n\n    this.setRecords = records => {\n      this.setState({\n        records\n      });\n    };\n\n    this.fetcher = () => {\n      let endpoint = config.ENDPOINT;\n      Promise.all([fetch(endpoint + '/playlists'), fetch(endpoint + '/genres'), fetch(endpoint + '/playlistRecords')], {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(([playlistRes, genreRes, recordRes]) => {\n        if (!playlistRes.ok) return playlistRes.json().then(error => Promise.reject(error));\n        if (!genreRes.ok) return genreRes.json().then(error => Promise.reject(error));\n        if (!recordRes.ok) return recordRes.json().then(error => Promise.reject(error));\n        return Promise.all([playlistRes.json(), genreRes.json(), recordRes.json()]);\n      }).then(([playlist, genres, records]) => {\n        this.setPlaylists(playlist);\n        this.setGenres(genres);\n        this.setRecords(records);\n      }).catch(error => {\n        console.error({\n          error\n        }); // this.setState({ error })\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetcher();\n  } // pageUpdate = () => {\n  //   this.componentDidMount()\n  // }\n\n\n  render() {\n    const contextValue = {\n      genres: this.state.genres,\n      playlists: this.state.playlists,\n      pageUpdate: this.fetcher\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: '/',\n      id: \"home-link\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, \"ShowTunes\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(PlaylistContext.Provider, {\n      value: contextValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"main\", {\n      id: \"stage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: Landing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/homepage\",\n      component: Homepage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/existing-playlists\",\n      component: Homepage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/playlist-display/:playlistId\",\n      component: PlaylistDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/App.js"],"names":["React","Component","Route","Link","Switch","config","PlaylistContext","Landing","Homepage","PlaylistDisplay","App","state","genres","playlists","records","user","error","setGenres","setState","setPlaylists","setRecords","fetcher","endpoint","ENDPOINT","Promise","all","fetch","method","headers","then","playlistRes","genreRes","recordRes","ok","json","reject","playlist","catch","console","componentDidMount","render","contextValue","pageUpdate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport './App.css';\nimport config from './config';\nimport PlaylistContext from './PlaylistContext'\nimport Landing from './Landingpage/Landing'\nimport Homepage from './Homepage/Homepage'\nimport PlaylistDisplay from './Playlists/Playlist-Display'\n\nclass App extends Component {\n\n  state = {\n    genres: [],\n    playlists: [],\n    records: [],\n    user: null,\n    error: null,\n  }\n\n  setGenres = genres => {\n    this.setState({\n      genres\n    })\n  }\n\n  setPlaylists = playlists => {\n    this.setState({\n      playlists\n    })\n  }\n\n  setRecords = records => {\n    this.setState({\n      records\n    })\n  }\n\n  fetcher = () => {\n    let endpoint = config.ENDPOINT\n    Promise.all([\n      fetch(endpoint + '/playlists'),\n      fetch(endpoint + '/genres'),\n      fetch(endpoint + '/playlistRecords')\n    ],\n      {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n        },\n      })\n      .then(([playlistRes, genreRes, recordRes]) => {\n        if (!playlistRes.ok)\n          return playlistRes.json().then(error => Promise.reject(error))\n        if (!genreRes.ok)\n          return genreRes.json().then(error => Promise.reject(error))\n        if (!recordRes.ok)\n          return recordRes.json().then(error => Promise.reject(error))\n        return Promise.all([playlistRes.json(), genreRes.json(), recordRes.json()])\n      })\n      .then(([playlist, genres, records]) => {\n        this.setPlaylists(playlist)\n        this.setGenres(genres)\n        this.setRecords(records)\n      })\n      .catch(error => {\n        console.error({ error });\n        // this.setState({ error })\n      });\n  }\n\n  componentDidMount() {\n    this.fetcher()\n  }\n\n  // pageUpdate = () => {\n  //   this.componentDidMount()\n  // }\n\n  render() {\n    const contextValue = {\n      genres: this.state.genres,\n      playlists: this.state.playlists,\n      pageUpdate: this.fetcher\n    }\n\n    return (\n      <div className=\"App\" >\n        <header className=\"App-header\">\n          <Link to={'/'} id=\"home-link\">\n            <h1>ShowTunes</h1>\n          </Link>\n          <hr />\n        </header>\n        <PlaylistContext.Provider value={contextValue}>\n          <main id=\"stage\">\n            <Switch>\n              <Route exact path='/' component={Landing} />\n              <Route path='/homepage' component={Homepage} />\n              <Route path='/existing-playlists' component={Homepage} />\n              <Route path='/playlist-display/:playlistId' component={PlaylistDisplay} />\n            </Switch>\n\n          </main>\n        </PlaylistContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}