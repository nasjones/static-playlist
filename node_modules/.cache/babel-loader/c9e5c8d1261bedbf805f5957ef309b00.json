{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Render.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config';\nimport Song from './Song';\nimport Nav from '../Nav';\nimport './Playlist-Render.css'; // import './Landing.css'\n\nexport default function PlaylistRender(props) {\n  //    let  _isMounted = false;\n  // constructor(props) {\n  //     super(props)\n  //     console.log(this.props)\n  // }\n  // this.state = {\n  //     playlist: null,\n  //     songs: [],\n  //     isFlushed: false\n  // }\n  let playlist;\n  let songs = []; // let setPlaylist = (playlist) => {\n  //     this.setState({ playlist })\n  // }\n  // let addSongs = (song) => {\n  //     this.setState({\n  //         songs: [...this.state.songs, song]\n  //     })\n  // }\n\n  let fetcher = () => {\n    // this._isMounted = true;\n    let playlistId = props.id;\n    console.log(playlistId); // if (this._isMounted) {\n\n    fetch(config.ENDPOINT + `/playlists/${playlistId}`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) return res.json().then(e => Promise.reject(e));\n      return res.json();\n    }).then(playlistOut => {\n      console.log(playlist); // setPlaylist(playlist)\n\n      playlist = playlistOut;\n      fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res2 => {\n        if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n        return res2.json();\n      }).then(genre => {\n        let rand = Math.floor(Math.random() * 1950);\n        let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand;\n        let fetData = {\n          qString: queryString\n        };\n        fetch(`${config.ENDPOINT}/data`, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(fetData)\n        }).then(res3 => {\n          if (!res3.ok) return res3.json().then(e => Promise.reject(e));\n          return res3.json();\n        }).then(response => {\n          console.log(response.tracks);\n          let runtime = 0;\n          let chosen = [];\n\n          while (runtime < playlist.length) {\n            let trackChoice = Math.floor(Math.random() * 50);\n\n            if (!chosen.includes(trackChoice)) {\n              chosen.push(trackChoice);\n              let artists = [];\n\n              for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++) artists.push(response.tracks.items[trackChoice].artists[i].name);\n\n              let song = {\n                id: response.tracks.items[trackChoice].id,\n                url: response.tracks.items[trackChoice].external_urls.spotify,\n                title: response.tracks.items[trackChoice].name,\n                length: response.tracks.items[trackChoice].duration_ms,\n                explicit: response.tracks.items[trackChoice].explicit,\n                artist: artists\n              };\n              console.log(song);\n              songs.push(song);\n              runtime += song.length;\n            }\n          }\n\n          console.log(runtime);\n        }).catch(error3 => {\n          console.error({\n            error3\n          });\n        });\n      }).catch(error2 => {\n        console.error({\n          error2\n        });\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    }); // }\n  }; // componentWillReceiveProps(nextProps) {\n  //     console.log(nextProps.match.params)\n  //     if (this.state.playlist)\n  //         if (nextProps.match.params.playlistId === this.state.playlist.id) {\n  //             return;\n  //         } else {\n  //             // this.componentDidMount()\n  //             this.render()\n  //         }\n  // }\n  // render() {\n\n\n  fetcher();\n  if (playlist === null) return null;\n  let songDisplay = songs.map(song => {\n    return /*#__PURE__*/React.createElement(Song, {\n      track: song,\n      key: song.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 16\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"playlistDisplay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"playlistContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, playlist.title), songDisplay)) // )\n  // {/* } */}\n  // }\n  // {/* </PlaylistContext.Consumer > */}\n  ;\n} // }","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Render.js"],"names":["React","Component","Link","withRouter","PlaylistContext","config","Song","Nav","PlaylistRender","props","playlist","songs","fetcher","playlistId","id","console","log","fetch","ENDPOINT","method","headers","then","res","ok","json","e","Promise","reject","playlistOut","genre_id","res2","genre","rand","Math","floor","random","queryString","name","fetData","qString","body","JSON","stringify","res3","response","tracks","runtime","chosen","length","trackChoice","includes","push","artists","i","items","song","url","external_urls","spotify","title","duration_ms","explicit","artist","catch","error3","error","error2","songDisplay","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\nimport Song from './Song'\nimport Nav from '../Nav'\nimport './Playlist-Render.css'\n// import './Landing.css'\n\n\nexport default function PlaylistRender(props) {\n    //    let  _isMounted = false;\n\n    // constructor(props) {\n    //     super(props)\n    //     console.log(this.props)\n\n\n    // }\n    // this.state = {\n    //     playlist: null,\n    //     songs: [],\n    //     isFlushed: false\n    // }\n\n    let playlist\n    let songs = []\n\n\n    // let setPlaylist = (playlist) => {\n    //     this.setState({ playlist })\n    // }\n\n    // let addSongs = (song) => {\n    //     this.setState({\n    //         songs: [...this.state.songs, song]\n    //     })\n    // }\n\n    let fetcher = () => {\n        // this._isMounted = true;\n        let playlistId = props.id\n        console.log(playlistId)\n        // if (this._isMounted) {\n        fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n            {\n                method: 'GET',\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(playlistOut => {\n                console.log(playlist)\n                // setPlaylist(playlist)\n                playlist = playlistOut\n\n\n                fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n                    {\n                        method: 'GET',\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    })\n                    .then(res2 => {\n                        if (!res2.ok)\n                            return res2.json().then(e => Promise.reject(e))\n                        return res2.json()\n                    })\n                    .then(genre => {\n                        let rand = Math.floor(Math.random() * 1950);\n                        let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n\n                        let fetData = {\n                            qString: queryString,\n                        }\n\n                        fetch(`${config.ENDPOINT}/data`, {\n                            method: 'POST',\n                            headers: {\n                                'content-type': 'application/json'\n                            },\n                            body: JSON.stringify(fetData),\n                        })\n                            .then(res3 => {\n                                if (!res3.ok)\n                                    return res3.json().then(e => Promise.reject(e))\n                                return res3.json()\n                            }).then(response => {\n                                console.log(response.tracks)\n                                let runtime = 0\n                                let chosen = []\n\n                                while (runtime < playlist.length) {\n\n                                    let trackChoice = Math.floor(Math.random() * 50);\n\n                                    if (!chosen.includes(trackChoice)) {\n                                        chosen.push(trackChoice)\n                                        let artists = []\n                                        for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++)\n                                            artists.push(response.tracks.items[trackChoice].artists[i].name)\n\n                                        let song = {\n                                            id: response.tracks.items[trackChoice].id,\n                                            url: response.tracks.items[trackChoice].external_urls.spotify,\n                                            title: response.tracks.items[trackChoice].name,\n                                            length: response.tracks.items[trackChoice].duration_ms,\n                                            explicit: response.tracks.items[trackChoice].explicit,\n                                            artist: artists\n                                        }\n                                        console.log(song)\n                                        songs.push(song)\n                                        runtime += song.length\n\n\n                                    }\n\n                                }\n                                console.log(runtime)\n\n                            }).catch(error3 => {\n                                console.error({ error3 })\n                            })\n\n\n\n\n                    }).catch(error2 => {\n                        console.error({ error2 });\n                    });\n\n            })\n            .catch(error => {\n                console.error({ error });\n            });\n        // }\n\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     console.log(nextProps.match.params)\n    //     if (this.state.playlist)\n    //         if (nextProps.match.params.playlistId === this.state.playlist.id) {\n    //             return;\n    //         } else {\n    //             // this.componentDidMount()\n    //             this.render()\n    //         }\n    // }\n\n\n    // render() {\n    fetcher()\n    if (playlist === null) return null;\n\n    let songDisplay = songs.map(song => {\n        return <Song track={song} key={song.id} />\n    })\n\n    return (\n\n        <div id=\"playlistDisplay\">\n            <div id=\"nav\">\n                <Nav />\n            </div>\n            <div id=\"playlistContent\">\n\n                <h2>{playlist.title}</h2>\n                {songDisplay}\n\n                {/* <NoteError> */}\n                {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                {/* <p></p> */}\n                {/* </NoteError> */}\n                {/* </article> */}\n            </div>\n\n        </div>\n        // )\n        // {/* } */}\n        // }\n        // {/* </PlaylistContext.Consumer > */}\n    )\n\n}\n// }\n"]},"metadata":{},"sourceType":"module"}