{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Homepage/Homepage.js\";\nimport React, { Component } from 'react'; // import { Link } from 'react-router-dom'\n\nimport PlaylistContext from '../PlaylistContext';\nimport './Homepage.css';\nimport GenreCheck from './GenreCheck';\nimport ValidationError from '../ValidationError';\nimport config from '../config';\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.clickStore = (e, status) => {\n      if (!status) this.setState({\n        selected: [...this.state.selected, e.target.value],\n        genTouch: true\n      });else {\n        let temp = this.state.selected.filter(item => {\n          if (item !== e.target.value) return item;\n        });\n        this.setState({\n          selected: temp\n        });\n      }\n    };\n\n    this.titleChange = e => {\n      this.setState({\n        title: e.target.value,\n        titleTouch: true\n      });\n    };\n\n    this.minChange = e => {\n      this.setState({\n        min: parseInt(e.target.value),\n        minTouch: true\n      });\n    };\n\n    this.hourChange = e => {\n      this.setState({\n        hour: parseInt(e.target.value),\n        hourTouch: true\n      });\n    };\n\n    this.minArr = () => {\n      let arr = new Array(60);\n\n      for (let i = 0; i <= 59; i++) arr[i] = i;\n\n      return arr;\n    };\n\n    this.hourArr = () => {\n      let arr = new Array(4);\n\n      for (let i = 0; i <= 2; i++) arr[i] = i;\n\n      return arr;\n    };\n\n    this.validateTime = () => {\n      const hourSelect = this.state.hour;\n      const minSelect = this.state.min;\n      if (hourSelect === null || minSelect === null || isNaN(hourSelect) || isNaN(minSelect) || hourSelect === 0 && minSelect === 0) return \"Select a valid time\";\n    };\n\n    this.validateGenre = () => {\n      const genres = this.state.selected;\n      if (genres.length === 0) return \"You must select at least one genre\";\n    };\n\n    this.validateTitle = () => {\n      const titleInput = this.state.title.trim();\n\n      if (titleInput.length === 0) {\n        return \"Title is required.\";\n      } else if (titleInput.length < 3) {\n        return \"Title must be atleast 3 characters long.\";\n      }\n    };\n\n    this.subHandle = (e, value) => {\n      e.preventDefault();\n      let time = 3600000 * this.state.hour + 60000 * this.state.min;\n      let newPlaylist = {\n        title: this.state.title.trim(),\n        length: time,\n        author: 1\n      };\n      let newId;\n      fetch(`${config.ENDPOINT}/playlists`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(newPlaylist)\n      }).then(res => {\n        if (!res.ok) return res.json().then(e => Promise.reject(e));\n        return res.json();\n      }).then(created => {\n        let newRecord = this.state.selected.map(value => {\n          return {\n            playlist_id: created.id,\n            genre_id: value\n          };\n        });\n        fetch(`${config.ENDPOINT}/playlistRecords`, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(newRecord)\n        }).then(res2 => {\n          if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n          return res2.json();\n        }).then(res2 => {\n          this.props.history.push(`/playlist-display/${created.id}`);\n        }).catch(error2 => {\n          console.error({\n            error2\n          });\n        }); // value.pageUpdate()\n      }).catch(error => {\n        console.error({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      title: \"\",\n      titleTouch: false,\n      selected: [],\n      genTouch: false,\n      hour: null,\n      hourTouch: false,\n      min: null,\n      minTouch: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PlaylistContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, value => {\n      let genres = value.genres.map(genre => /*#__PURE__*/React.createElement(GenreCheck, {\n        id: genre.id,\n        name: genre.name,\n        key: genre.id,\n        clickE: this.clickStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }\n      }));\n      let minutes = this.minArr().map(min => {\n        if (min < 10) return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 36\n          }\n        }, \"0\", min);else return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 36\n          }\n        }, min);\n      });\n      let hours = this.hourArr().map(min => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 32\n          }\n        }, min);\n      });\n      const timeError = this.validateTime();\n      const genreError = this.validateGenre();\n      const titleError = this.validateTitle(); // let untouched = this.state.nameTouch && this.state.genTouch && this.state.hourTouch && this.state.minTouch\n\n      return genres && /*#__PURE__*/React.createElement(\"div\", {\n        id: \"play-stage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"input-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"title-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 41\n        }\n      }, \"Playlist Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        id: \"title-input\",\n        onChange: this.titleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 41\n        }\n      }), this.state.titleTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: titleError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 67\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"hour-length\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 41\n        }\n      }, \"Playlist length: \"), /*#__PURE__*/React.createElement(\"select\", {\n        onChange: this.hourChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 45\n        }\n      }, \"--Hour(s)--\"), hours), \":\", /*#__PURE__*/React.createElement(\"select\", {\n        onChange: this.minChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 45\n        }\n      }, \"--Minute(s)--\"), minutes), this.state.hourTouch && this.state.minTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: timeError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 91\n        }\n      }))), /*#__PURE__*/React.createElement(\"fieldset\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 37\n        }\n      }, \"Choose your genre(s)!\"), this.state.genTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: genreError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 62\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"genres\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 37\n        }\n      }, genres)), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        id: \"create\",\n        onClick: e => this.subHandle(e, value),\n        disabled: timeError || genreError || titleError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 33\n        }\n      }, \"Create your playlist!\")));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Homepage/Homepage.js"],"names":["React","Component","PlaylistContext","GenreCheck","ValidationError","config","HomePage","constructor","props","clickStore","e","status","setState","selected","state","target","value","genTouch","temp","filter","item","titleChange","title","titleTouch","minChange","min","parseInt","minTouch","hourChange","hour","hourTouch","minArr","arr","Array","i","hourArr","validateTime","hourSelect","minSelect","isNaN","validateGenre","genres","length","validateTitle","titleInput","trim","subHandle","preventDefault","time","newPlaylist","author","newId","fetch","ENDPOINT","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","created","newRecord","map","playlist_id","id","genre_id","res2","history","push","catch","error2","console","error","render","genre","name","minutes","hours","timeError","genreError","titleError"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport './Homepage.css'\nimport GenreCheck from './GenreCheck'\nimport ValidationError from '../ValidationError'\nimport config from '../config'\n\n\nexport default class HomePage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: \"\",\n            titleTouch: false,\n            selected: [],\n            genTouch: false,\n            hour: null,\n            hourTouch: false,\n            min: null,\n            minTouch: false,\n        }\n    }\n\n    clickStore = (e, status) => {\n        if (!status)\n            this.setState({\n                selected: [...this.state.selected, e.target.value],\n                genTouch: true\n            })\n        else {\n            let temp = this.state.selected.filter(item => {\n                if (item !== e.target.value)\n                    return item\n            })\n            this.setState({ selected: temp })\n        }\n\n    }\n\n    titleChange = e => {\n        this.setState({\n            title: e.target.value,\n            titleTouch: true\n        })\n    }\n\n    minChange = e => {\n        this.setState({\n            min: parseInt(e.target.value),\n            minTouch: true\n        })\n    }\n\n    hourChange = e => {\n        this.setState({\n            hour: parseInt(e.target.value),\n            hourTouch: true\n        })\n    }\n\n    minArr = () => {\n        let arr = new Array(60);\n        for (let i = 0; i <= 59; i++)\n            arr[i] = i\n\n        return arr\n    }\n\n    hourArr = () => {\n        let arr = new Array(4);\n        for (let i = 0; i <= 2; i++)\n            arr[i] = i\n        return arr\n    }\n\n    validateTime = () => {\n        const hourSelect = this.state.hour\n        const minSelect = this.state.min\n        if ((hourSelect === null) || (minSelect === null) || isNaN(hourSelect) || isNaN(minSelect) || (hourSelect === 0 && minSelect === 0))\n            return \"Select a valid time\"\n    }\n\n    validateGenre = () => {\n        const genres = this.state.selected\n        if (genres.length === 0)\n            return \"You must select at least one genre\"\n    }\n\n    validateTitle = () => {\n        const titleInput = this.state.title.trim()\n        if (titleInput.length === 0) {\n            return \"Title is required.\"\n        } else if (titleInput.length < 3) {\n            return \"Title must be atleast 3 characters long.\"\n        }\n    }\n\n    subHandle = (e, value) => {\n        e.preventDefault();\n        let time = (3600000 * this.state.hour) + (60000 * this.state.min)\n        let newPlaylist = {\n            title: this.state.title.trim(),\n            length: time,\n            author: 1\n        }\n\n        let newId\n\n        fetch(`${config.ENDPOINT}/playlists`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(newPlaylist),\n        })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then((created) => {\n                let newRecord = this.state.selected.map(value => {\n                    return {\n                        playlist_id: created.id,\n                        genre_id: value,\n                    }\n                })\n\n                fetch(`${config.ENDPOINT}/playlistRecords`, {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json'\n                    },\n                    body: JSON.stringify(newRecord),\n                })\n                    .then(res2 => {\n                        if (!res2.ok)\n                            return res2.json().then(e => Promise.reject(e))\n                        return res2.json()\n                    }).then(res2 => {\n\n                        this.props.history.push(`/playlist-display/${created.id}`)\n                    }).catch(error2 => {\n                        console.error({ error2 })\n                    })\n                // value.pageUpdate()\n\n\n            })\n            .catch(error => {\n                console.error({ error })\n            })\n    }\n\n    render() {\n\n        return (\n            <PlaylistContext.Consumer>\n                {(value) => {\n\n                    let genres = value.genres.map(genre =>\n                        <GenreCheck id={genre.id} name={genre.name} key={genre.id} clickE={this.clickStore} />\n                    )\n\n                    let minutes = this.minArr().map(min => {\n                        if (min < 10)\n                            return <option value={min} key={min}>0{min}</option>\n                        else\n                            return <option value={min} key={min}>{min}</option>\n                    })\n\n                    let hours = this.hourArr().map(min => {\n                        return <option value={min} key={min}>{min}</option>\n                    })\n\n                    const timeError = this.validateTime()\n                    const genreError = this.validateGenre()\n                    const titleError = this.validateTitle()\n                    // let untouched = this.state.nameTouch && this.state.genTouch && this.state.hourTouch && this.state.minTouch\n\n\n                    return genres && (\n                        <div id=\"play-stage\">\n                            <form>\n                                <div id=\"input-wrap\">\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"title-input\">Playlist Name: </label>\n                                        <input type=\"text\" id=\"title-input\" onChange={this.titleChange} />\n                                        {this.state.titleTouch && <ValidationError message={titleError} />}\n                                    </div>\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"hour-length\">Playlist length: </label>\n                                        <select onChange={this.hourChange}>\n                                            <option value={null}>--Hour(s)--</option>\n                                            {hours}\n                                        </select>\n                                    :\n                                    <select onChange={this.minChange}>\n                                            <option value={null}>--Minute(s)--</option>\n                                            {minutes}\n                                        </select>\n                                        {(this.state.hourTouch && this.state.minTouch) && <ValidationError message={timeError} />}\n                                    </div>\n                                </div>\n                                <fieldset >\n                                    <legend>Choose your genre(s)!</legend>\n                                    {(this.state.genTouch && <ValidationError message={genreError} />)}\n                                    <div id=\"genres\">\n                                        {genres}\n                                    </div>\n                                </fieldset>\n                                <button type=\"submit\" id=\"create\" onClick={e => this.subHandle(e, value)} disabled={timeError || genreError || titleError}>Create your playlist!</button>\n                            </form>\n                        </div>\n                    )\n                }\n                }\n            </PlaylistContext.Consumer >\n\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}