{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Homepage/Homepage.js\";\nimport React, { Component } from 'react'; // import { Link } from 'react-router-dom'\n\nimport PlaylistContext from '../PlaylistContext';\nimport './Homepage.css';\nimport GenreCheck from './GenreCheck';\nimport ValidationError from '../ValidationError';\nimport config from '../config';\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.clickStore = (e, status) => {\n      if (!status) this.setState({\n        selectedIds: [...this.state.selectedIds, e.target.value],\n        selectedNames: [...this.state.selectedNames, e.target.name],\n        genTouch: true\n      });else {\n        let temp = this.state.selectedIds.filter(item => {\n          if (item !== e.target.value) return item;\n        });\n        this.setState({\n          selectedIds: temp\n        });\n      }\n    };\n\n    this.titleChange = e => {\n      this.setState({\n        title: e.target.value,\n        titleTouch: true\n      });\n    };\n\n    this.minChange = e => {\n      this.setState({\n        min: parseInt(e.target.value),\n        minTouch: true\n      });\n    };\n\n    this.hourChange = e => {\n      this.setState({\n        hour: parseInt(e.target.value),\n        hourTouch: true\n      });\n    };\n\n    this.minArr = () => {\n      let arr = new Array(60);\n\n      for (let i = 0; i <= 59; i++) arr[i] = i;\n\n      return arr;\n    };\n\n    this.hourArr = () => {\n      let arr = new Array(4);\n\n      for (let i = 0; i <= 2; i++) arr[i] = i;\n\n      return arr;\n    };\n\n    this.validateTime = () => {\n      const hourSelect = this.state.hour;\n      const minSelect = this.state.min;\n      if (hourSelect === null || minSelect === null || isNaN(hourSelect) || isNaN(minSelect) || hourSelect === 0 && minSelect === 0) return \"Select a valid time\";\n    };\n\n    this.validateGenre = () => {\n      const genres = this.state.selectedIds;\n      if (genres.length === 0) return \"You must select at least one genre\";\n    };\n\n    this.validateTitle = () => {\n      const titleInput = this.state.title.trim();\n\n      if (titleInput.length === 0) {\n        return \"Title is required.\";\n      } else if (titleInput.length < 3) {\n        return \"Title must be atleast 3 characters long.\";\n      }\n    };\n\n    this.subHandle = (e, value) => {\n      e.preventDefault();\n      let time = 3600000 * this.state.hour + 60000 * this.state.min;\n      let newPlaylist = {\n        title: this.state.title.trim(),\n        length: time,\n        author: 1\n      };\n      fetch(`${config.ENDPOINT}/playlists`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(newPlaylist)\n      }).then(res => {\n        if (!res.ok) return res.json().then(e => Promise.reject(e));\n        return res.json();\n      }).then(created => {\n        let newRecord = this.state.selectedIds.map(value => {\n          return {\n            playlist_id: created.id,\n            genre_id: value\n          };\n        });\n        fetch(`${config.ENDPOINT}/playlistRecords`, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(newRecord)\n        }).then(res2 => {\n          if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n          return res2.json();\n        }).then(res2 => {\n          let fetData = this.state.selectedNames.map(value => {\n            return {\n              genreNames: value\n            };\n          });\n          fetch(`${config.ENDPOINT}/data`, {\n            method: 'POST',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify(newRecord)\n          }).then(res2 => {\n            if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n            return res2.json();\n          }).then(res2 => {\n            value.pageUpdate();\n            this.props.history.push(`/playlist-display/${created.id}`);\n          }).catch(error2 => {\n            console.error({\n              error2\n            });\n          });\n        }).catch(error2 => {\n          console.error({\n            error2\n          });\n        }); // value.pageUpdate()\n      }).catch(error => {\n        console.error({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      title: \"\",\n      titleTouch: false,\n      selectedIds: [],\n      selectedNames: [],\n      genTouch: false,\n      hour: null,\n      hourTouch: false,\n      min: null,\n      minTouch: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PlaylistContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, value => {\n      let genres = value.genres.map(genre => /*#__PURE__*/React.createElement(GenreCheck, {\n        id: genre.id,\n        name: genre.name,\n        key: genre.id,\n        clickE: this.clickStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }\n      }));\n      let minutes = this.minArr().map(min => {\n        if (min < 10) return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 36\n          }\n        }, \"0\", min);else return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 36\n          }\n        }, min);\n      });\n      let hours = this.hourArr().map(min => {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: min,\n          key: min,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 32\n          }\n        }, min);\n      });\n      const timeError = this.validateTime();\n      const genreError = this.validateGenre();\n      const titleError = this.validateTitle(); // let untouched = this.state.nameTouch && this.state.genTouch && this.state.hourTouch && this.state.minTouch\n\n      return genres && /*#__PURE__*/React.createElement(\"div\", {\n        id: \"play-stage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"input-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"title-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 41\n        }\n      }, \"Playlist Name: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        id: \"title-input\",\n        onChange: this.titleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 41\n        }\n      }), this.state.titleTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: titleError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 67\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"inputs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"hour-length\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 41\n        }\n      }, \"Playlist length: \"), /*#__PURE__*/React.createElement(\"select\", {\n        onChange: this.hourChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 45\n        }\n      }, \"--Hour(s)--\"), hours), \":\", /*#__PURE__*/React.createElement(\"select\", {\n        onChange: this.minChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 45\n        }\n      }, \"--Minute(s)--\"), minutes), this.state.hourTouch && this.state.minTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: timeError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 91\n        }\n      }))), /*#__PURE__*/React.createElement(\"fieldset\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 37\n        }\n      }, \"Choose your genre(s)!\"), this.state.genTouch && /*#__PURE__*/React.createElement(ValidationError, {\n        message: genreError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 62\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"genres\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 37\n        }\n      }, genres)), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        id: \"create\",\n        onClick: e => this.subHandle(e, value),\n        disabled: timeError || genreError || titleError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 33\n        }\n      }, \"Create your playlist!\")));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Homepage/Homepage.js"],"names":["React","Component","PlaylistContext","GenreCheck","ValidationError","config","HomePage","constructor","props","clickStore","e","status","setState","selectedIds","state","target","value","selectedNames","name","genTouch","temp","filter","item","titleChange","title","titleTouch","minChange","min","parseInt","minTouch","hourChange","hour","hourTouch","minArr","arr","Array","i","hourArr","validateTime","hourSelect","minSelect","isNaN","validateGenre","genres","length","validateTitle","titleInput","trim","subHandle","preventDefault","time","newPlaylist","author","fetch","ENDPOINT","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","created","newRecord","map","playlist_id","id","genre_id","res2","fetData","genreNames","pageUpdate","history","push","catch","error2","console","error","render","genre","minutes","hours","timeError","genreError","titleError"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n// import { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport './Homepage.css'\nimport GenreCheck from './GenreCheck'\nimport ValidationError from '../ValidationError'\nimport config from '../config'\n\n\nexport default class HomePage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: \"\",\n            titleTouch: false,\n            selectedIds: [],\n            selectedNames: [],\n            genTouch: false,\n            hour: null,\n            hourTouch: false,\n            min: null,\n            minTouch: false,\n        }\n    }\n\n    clickStore = (e, status) => {\n        if (!status)\n            this.setState({\n                selectedIds: [...this.state.selectedIds, e.target.value],\n                selectedNames: [...this.state.selectedNames, e.target.name],\n                genTouch: true\n            })\n        else {\n            let temp = this.state.selectedIds.filter(item => {\n                if (item !== e.target.value)\n                    return item\n            })\n            this.setState({ selectedIds: temp })\n        }\n\n    }\n\n    titleChange = e => {\n        this.setState({\n            title: e.target.value,\n            titleTouch: true\n        })\n    }\n\n    minChange = e => {\n        this.setState({\n            min: parseInt(e.target.value),\n            minTouch: true\n        })\n    }\n\n    hourChange = e => {\n        this.setState({\n            hour: parseInt(e.target.value),\n            hourTouch: true\n        })\n    }\n\n    minArr = () => {\n        let arr = new Array(60);\n        for (let i = 0; i <= 59; i++)\n            arr[i] = i\n\n        return arr\n    }\n\n    hourArr = () => {\n        let arr = new Array(4);\n        for (let i = 0; i <= 2; i++)\n            arr[i] = i\n        return arr\n    }\n\n    validateTime = () => {\n        const hourSelect = this.state.hour\n        const minSelect = this.state.min\n        if ((hourSelect === null) || (minSelect === null) || isNaN(hourSelect) || isNaN(minSelect) || (hourSelect === 0 && minSelect === 0))\n            return \"Select a valid time\"\n    }\n\n    validateGenre = () => {\n        const genres = this.state.selectedIds\n        if (genres.length === 0)\n            return \"You must select at least one genre\"\n    }\n\n    validateTitle = () => {\n        const titleInput = this.state.title.trim()\n        if (titleInput.length === 0) {\n            return \"Title is required.\"\n        } else if (titleInput.length < 3) {\n            return \"Title must be atleast 3 characters long.\"\n        }\n    }\n\n    subHandle = (e, value) => {\n        e.preventDefault();\n        let time = (3600000 * this.state.hour) + (60000 * this.state.min)\n        let newPlaylist = {\n            title: this.state.title.trim(),\n            length: time,\n            author: 1\n        }\n\n\n        fetch(`${config.ENDPOINT}/playlists`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(newPlaylist),\n        })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(created => {\n                let newRecord = this.state.selectedIds.map(value => {\n                    return {\n                        playlist_id: created.id,\n                        genre_id: value,\n                    }\n                })\n\n                fetch(`${config.ENDPOINT}/playlistRecords`, {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json'\n                    },\n                    body: JSON.stringify(newRecord),\n                })\n                    .then(res2 => {\n                        if (!res2.ok)\n                            return res2.json().then(e => Promise.reject(e))\n                        return res2.json()\n                    }).then(res2 => {\n\n                        let fetData =\n                            this.state.selectedNames.map(value => {\n                                return {\n                                    genreNames: value,\n                                }\n                            })\n\n\n                        fetch(`${config.ENDPOINT}/data`, {\n                            method: 'POST',\n                            headers: {\n                                'content-type': 'application/json'\n                            },\n                            body: JSON.stringify(newRecord),\n                        })\n                            .then(res2 => {\n                                if (!res2.ok)\n                                    return res2.json().then(e => Promise.reject(e))\n                                return res2.json()\n                            }).then(res2 => {\n                                value.pageUpdate()\n                                this.props.history.push(`/playlist-display/${created.id}`)\n                            }).catch(error2 => {\n                                console.error({ error2 })\n                            })\n                    }).catch(error2 => {\n                        console.error({ error2 })\n                    })\n                // value.pageUpdate()\n\n\n            })\n            .catch(error => {\n                console.error({ error })\n            })\n    }\n\n    render() {\n\n        return (\n            <PlaylistContext.Consumer>\n                {(value) => {\n\n                    let genres = value.genres.map(genre =>\n                        <GenreCheck id={genre.id} name={genre.name} key={genre.id} clickE={this.clickStore} />\n                    )\n\n                    let minutes = this.minArr().map(min => {\n                        if (min < 10)\n                            return <option value={min} key={min}>0{min}</option>\n                        else\n                            return <option value={min} key={min}>{min}</option>\n                    })\n\n                    let hours = this.hourArr().map(min => {\n                        return <option value={min} key={min}>{min}</option>\n                    })\n\n                    const timeError = this.validateTime()\n                    const genreError = this.validateGenre()\n                    const titleError = this.validateTitle()\n                    // let untouched = this.state.nameTouch && this.state.genTouch && this.state.hourTouch && this.state.minTouch\n\n\n                    return genres && (\n                        <div id=\"play-stage\">\n                            <form>\n                                <div id=\"input-wrap\">\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"title-input\">Playlist Name: </label>\n                                        <input type=\"text\" id=\"title-input\" onChange={this.titleChange} />\n                                        {this.state.titleTouch && <ValidationError message={titleError} />}\n                                    </div>\n                                    <div className=\"inputs\">\n                                        <label htmlFor=\"hour-length\">Playlist length: </label>\n                                        <select onChange={this.hourChange}>\n                                            <option value={null}>--Hour(s)--</option>\n                                            {hours}\n                                        </select>\n                                    :\n                                    <select onChange={this.minChange}>\n                                            <option value={null}>--Minute(s)--</option>\n                                            {minutes}\n                                        </select>\n                                        {(this.state.hourTouch && this.state.minTouch) && <ValidationError message={timeError} />}\n                                    </div>\n                                </div>\n                                <fieldset >\n                                    <legend>Choose your genre(s)!</legend>\n                                    {(this.state.genTouch && <ValidationError message={genreError} />)}\n                                    <div id=\"genres\">\n                                        {genres}\n                                    </div>\n                                </fieldset>\n                                <button type=\"submit\" id=\"create\" onClick={e => this.subHandle(e, value)} disabled={timeError || genreError || titleError}>Create your playlist!</button>\n                            </form>\n                        </div>\n                    )\n                }\n                }\n            </PlaylistContext.Consumer >\n\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}