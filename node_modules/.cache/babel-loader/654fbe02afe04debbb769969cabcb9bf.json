{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config';\nimport Song from './Song';\nimport Nav from '../Nav';\nimport './Playlist-Display.css'; // import './Landing.css'\n\nexport default class PlaylistDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.addSongs = song => {\n      this.setState({\n        songs: [...this.state.songs, song]\n      });\n    };\n\n    this.state = {\n      playlist: null,\n      songs: [],\n      isFlushed: false\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    let playlistId = this.props.match.params.playlistId;\n    console.log(playlistId);\n\n    if (this._isMounted) {\n      fetch(config.ENDPOINT + `/playlists/${playlistId}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res => {\n        if (!res.ok) return res.json().then(e => Promise.reject(e));\n        return res.json();\n      }).then(playlist => {\n        console.log(playlist);\n        this.setPlaylist(playlist);\n        fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`, {\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json'\n          }\n        }).then(res2 => {\n          if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n          return res2.json();\n        }).then(genre => {\n          let rand = Math.floor(Math.random() * 1950);\n          let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand;\n          let fetData = {\n            qString: queryString\n          };\n          fetch(`${config.ENDPOINT}/data`, {\n            method: 'POST',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify(fetData)\n          }).then(res3 => {\n            if (!res3.ok) return res3.json().then(e => Promise.reject(e));\n            return res3.json();\n          }).then(response => {\n            console.log(response.tracks);\n            let runtime = 0;\n            let chosen = [];\n\n            while (runtime < playlist.length) {\n              let trackChoice = Math.floor(Math.random() * 50);\n\n              if (!chosen.includes(trackChoice)) {\n                chosen.push(trackChoice);\n                let artists = [];\n\n                for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++) artists.push(response.tracks.items[trackChoice].artists[i].name);\n\n                let song = {\n                  id: response.tracks.items[trackChoice].id,\n                  url: response.tracks.items[trackChoice].external_urls.spotify,\n                  title: response.tracks.items[trackChoice].name,\n                  length: response.tracks.items[trackChoice].duration_ms,\n                  explicit: response.tracks.items[trackChoice].explicit,\n                  artist: artists\n                };\n                console.log(song);\n                runtime += song.length;\n                this.addSongs(song);\n              }\n            }\n\n            console.log(runtime);\n          }).catch(error3 => {\n            console.error({\n              error3\n            });\n          });\n        }).catch(error2 => {\n          console.error({\n            error2\n          });\n        });\n      }).catch(error => {\n        console.error({\n          error\n        });\n      });\n    }\n  } // componentWillReceiveProps(nextProps) {\n  //     console.log(nextProps.match.params)\n  //     if (this.state.playlist)\n  //         if (nextProps.match.params.playlistId === this.state.playlist.id) {\n  //             return;\n  //         } else {\n  //             // this.componentDidMount()\n  //             this.render()\n  //         }\n  // }\n\n\n  render() {\n    if (this.state.playlist === null) return null;\n    let songDisplay = this.state.songs.map(song => {\n      return /*#__PURE__*/React.createElement(Song, {\n        track: song,\n        key: song.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"playlistDisplay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      clicker: this.componentDidMount,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"playlistContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, this.state.playlist.title), songDisplay)) // )\n    // {/* } */}\n    // }\n    // {/* </PlaylistContext.Consumer > */}\n    ;\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js"],"names":["React","Component","Link","withRouter","PlaylistContext","config","Song","Nav","PlaylistDisplay","constructor","props","_isMounted","setPlaylist","playlist","setState","addSongs","song","songs","state","isFlushed","componentDidMount","playlistId","match","params","console","log","fetch","ENDPOINT","method","headers","then","res","ok","json","e","Promise","reject","genre_id","res2","genre","rand","Math","floor","random","queryString","name","fetData","qString","body","JSON","stringify","res3","response","tracks","runtime","chosen","length","trackChoice","includes","push","artists","i","items","id","url","external_urls","spotify","title","duration_ms","explicit","artist","catch","error3","error","error2","render","songDisplay","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,wBAAP,C,CACA;;AAGA,eAAe,MAAMC,eAAN,SAA8BP,SAA9B,CAAwC;AAGnDQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAFnBC,UAEmB,GAFN,KAEM;;AAAA,SAWnBC,WAXmB,GAWJC,QAAD,IAAc;AACxB,WAAKC,QAAL,CAAc;AAAED,QAAAA;AAAF,OAAd;AACH,KAbkB;;AAAA,SAenBE,QAfmB,GAePC,IAAD,IAAU;AACjB,WAAKF,QAAL,CAAc;AACVG,QAAAA,KAAK,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,KAAf,EAAsBD,IAAtB;AADG,OAAd;AAGH,KAnBkB;;AAGf,SAAKE,KAAL,GAAa;AACTL,MAAAA,QAAQ,EAAE,IADD;AAETI,MAAAA,KAAK,EAAE,EAFE;AAGTE,MAAAA,SAAS,EAAE;AAHF,KAAb;AAMH;;AAYDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKT,UAAL,GAAkB,IAAlB;AACA,QAAIU,UAAU,GAAG,KAAKX,KAAL,CAAWY,KAAX,CAAiBC,MAAjB,CAAwBF,UAAzC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;;AACA,QAAI,KAAKV,UAAT,EAAqB;AACjBe,MAAAA,KAAK,CAACrB,MAAM,CAACsB,QAAP,GAAmB,cAAaN,UAAW,EAA5C,EACD;AACIO,QAAAA,MAAM,EAAE,KADZ;AAEIC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAFb,OADC,CAAL,CAOKC,IAPL,CAOUC,GAAG,IAAI;AACT,YAAI,CAACA,GAAG,CAACC,EAAT,EACI,OAAOD,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBI,CAAC,IAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAArB,CAAP;AACJ,eAAOH,GAAG,CAACE,IAAJ,EAAP;AACH,OAXL,EAYKH,IAZL,CAYUjB,QAAQ,IAAI;AACdW,QAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AACA,aAAKD,WAAL,CAAiBC,QAAjB;AAEAa,QAAAA,KAAK,CAACrB,MAAM,CAACsB,QAAP,GAAmB,WAAUd,QAAQ,CAACwB,QAAS,EAAhD,EACD;AACIT,UAAAA,MAAM,EAAE,KADZ;AAEIC,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX;AAFb,SADC,CAAL,CAOKC,IAPL,CAOUQ,IAAI,IAAI;AACV,cAAI,CAACA,IAAI,CAACN,EAAV,EACI,OAAOM,IAAI,CAACL,IAAL,GAAYH,IAAZ,CAAiBI,CAAC,IAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAtB,CAAP;AACJ,iBAAOI,IAAI,CAACL,IAAL,EAAP;AACH,SAXL,EAYKH,IAZL,CAYUS,KAAK,IAAI;AACX,cAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAX;AACA,cAAIC,WAAW,GAAG,cAAcL,KAAK,CAACM,IAApB,GAA2B,8BAA3B,GAA4DL,IAA9E;AAEA,cAAIM,OAAO,GAAG;AACVC,YAAAA,OAAO,EAAEH;AADC,WAAd;AAIAlB,UAAAA,KAAK,CAAE,GAAErB,MAAM,CAACsB,QAAS,OAApB,EAA4B;AAC7BC,YAAAA,MAAM,EAAE,MADqB;AAE7BC,YAAAA,OAAO,EAAE;AACL,8BAAgB;AADX,aAFoB;AAK7BmB,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,OAAf;AALuB,WAA5B,CAAL,CAOKhB,IAPL,CAOUqB,IAAI,IAAI;AACV,gBAAI,CAACA,IAAI,CAACnB,EAAV,EACI,OAAOmB,IAAI,CAAClB,IAAL,GAAYH,IAAZ,CAAiBI,CAAC,IAAIC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAtB,CAAP;AACJ,mBAAOiB,IAAI,CAAClB,IAAL,EAAP;AACH,WAXL,EAWOH,IAXP,CAWYsB,QAAQ,IAAI;AAChB5B,YAAAA,OAAO,CAACC,GAAR,CAAY2B,QAAQ,CAACC,MAArB;AACA,gBAAIC,OAAO,GAAG,CAAd;AACA,gBAAIC,MAAM,GAAG,EAAb;;AAEA,mBAAOD,OAAO,GAAGzC,QAAQ,CAAC2C,MAA1B,EAAkC;AAE9B,kBAAIC,WAAW,GAAGhB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAlB;;AAEA,kBAAI,CAACY,MAAM,CAACG,QAAP,CAAgBD,WAAhB,CAAL,EAAmC;AAC/BF,gBAAAA,MAAM,CAACI,IAAP,CAAYF,WAAZ;AACA,oBAAIG,OAAO,GAAG,EAAd;;AACA,qBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAAQ,CAACC,MAAT,CAAgBS,KAAhB,CAAsBL,WAAtB,EAAmCG,OAAnC,CAA2CJ,MAA/D,EAAuEK,CAAC,EAAxE,EACID,OAAO,CAACD,IAAR,CAAaP,QAAQ,CAACC,MAAT,CAAgBS,KAAhB,CAAsBL,WAAtB,EAAmCG,OAAnC,CAA2CC,CAA3C,EAA8ChB,IAA3D;;AAEJ,oBAAI7B,IAAI,GAAG;AACP+C,kBAAAA,EAAE,EAAEX,QAAQ,CAACC,MAAT,CAAgBS,KAAhB,CAAsBL,WAAtB,EAAmCM,EADhC;AAEPC,kBAAAA,GAAG,EAAEZ,QAAQ,CAACC,MAAT,CAAgBS,KAAhB,CAAsBL,WAAtB,EAAmCQ,aAAnC,CAAiDC,OAF/C;AAGPC,kBAAAA,KAAK,EAAEf,QAAQ,CAACC,MAAT,CAAgBS,KAAhB,CAAsBL,WAAtB,EAAmCZ,IAHnC;AAIPW,kBAAAA,MAAM,EAAEJ,QAAQ,CAACC,MAAT,CAAgBS,KAAhB,CAAsBL,WAAtB,EAAmCW,WAJpC;AAKPC,kBAAAA,QAAQ,EAAEjB,QAAQ,CAACC,MAAT,CAAgBS,KAAhB,CAAsBL,WAAtB,EAAmCY,QALtC;AAMPC,kBAAAA,MAAM,EAAEV;AAND,iBAAX;AAQApC,gBAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAsC,gBAAAA,OAAO,IAAItC,IAAI,CAACwC,MAAhB;AACA,qBAAKzC,QAAL,CAAcC,IAAd;AAEH;AAEJ;;AACDQ,YAAAA,OAAO,CAACC,GAAR,CAAY6B,OAAZ;AAEH,WA3CL,EA2COiB,KA3CP,CA2CaC,MAAM,IAAI;AACfhD,YAAAA,OAAO,CAACiD,KAAR,CAAc;AAAED,cAAAA;AAAF,aAAd;AACH,WA7CL;AAkDH,SAtEL,EAsEOD,KAtEP,CAsEaG,MAAM,IAAI;AACflD,UAAAA,OAAO,CAACiD,KAAR,CAAc;AAAEC,YAAAA;AAAF,WAAd;AACH,SAxEL;AA0EH,OA1FL,EA2FKH,KA3FL,CA2FWE,KAAK,IAAI;AACZjD,QAAAA,OAAO,CAACiD,KAAR,CAAc;AAAEA,UAAAA;AAAF,SAAd;AACH,OA7FL;AA8FH;AAEJ,GA7HkD,CA+HnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAE,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKzD,KAAL,CAAWL,QAAX,KAAwB,IAA5B,EAAkC,OAAO,IAAP;AAElC,QAAI+D,WAAW,GAAG,KAAK1D,KAAL,CAAWD,KAAX,CAAiB4D,GAAjB,CAAqB7D,IAAI,IAAI;AAC3C,0BAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEA,IAAb;AAAmB,QAAA,GAAG,EAAEA,IAAI,CAAC+C,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFiB,CAAlB;AAGA,wBAEI;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAE,KAAK3C,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAII;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKF,KAAL,CAAWL,QAAX,CAAoBsD,KAAzB,CAFJ,EAGKS,WAHL,CAJJ,CAFJ,CAmBI;AACA;AACA;AACA;AAtBJ;AAyBH;;AA1KkD","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\nimport Song from './Song'\nimport Nav from '../Nav'\nimport './Playlist-Display.css'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlist: null,\n            songs: [],\n            isFlushed: false\n        }\n\n    }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    addSongs = (song) => {\n        this.setState({\n            songs: [...this.state.songs, song]\n        })\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        let playlistId = this.props.match.params.playlistId\n        console.log(playlistId)\n        if (this._isMounted) {\n            fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n                {\n                    method: 'GET',\n                    headers: {\n                        'content-type': 'application/json'\n                    }\n                })\n                .then(res => {\n                    if (!res.ok)\n                        return res.json().then(e => Promise.reject(e))\n                    return res.json()\n                })\n                .then(playlist => {\n                    console.log(playlist)\n                    this.setPlaylist(playlist)\n\n                    fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n                        {\n                            method: 'GET',\n                            headers: {\n                                'content-type': 'application/json'\n                            }\n                        })\n                        .then(res2 => {\n                            if (!res2.ok)\n                                return res2.json().then(e => Promise.reject(e))\n                            return res2.json()\n                        })\n                        .then(genre => {\n                            let rand = Math.floor(Math.random() * 1950);\n                            let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n\n                            let fetData = {\n                                qString: queryString,\n                            }\n\n                            fetch(`${config.ENDPOINT}/data`, {\n                                method: 'POST',\n                                headers: {\n                                    'content-type': 'application/json'\n                                },\n                                body: JSON.stringify(fetData),\n                            })\n                                .then(res3 => {\n                                    if (!res3.ok)\n                                        return res3.json().then(e => Promise.reject(e))\n                                    return res3.json()\n                                }).then(response => {\n                                    console.log(response.tracks)\n                                    let runtime = 0\n                                    let chosen = []\n\n                                    while (runtime < playlist.length) {\n\n                                        let trackChoice = Math.floor(Math.random() * 50);\n\n                                        if (!chosen.includes(trackChoice)) {\n                                            chosen.push(trackChoice)\n                                            let artists = []\n                                            for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++)\n                                                artists.push(response.tracks.items[trackChoice].artists[i].name)\n\n                                            let song = {\n                                                id: response.tracks.items[trackChoice].id,\n                                                url: response.tracks.items[trackChoice].external_urls.spotify,\n                                                title: response.tracks.items[trackChoice].name,\n                                                length: response.tracks.items[trackChoice].duration_ms,\n                                                explicit: response.tracks.items[trackChoice].explicit,\n                                                artist: artists\n                                            }\n                                            console.log(song)\n                                            runtime += song.length\n                                            this.addSongs(song)\n\n                                        }\n\n                                    }\n                                    console.log(runtime)\n\n                                }).catch(error3 => {\n                                    console.error({ error3 })\n                                })\n\n\n\n\n                        }).catch(error2 => {\n                            console.error({ error2 });\n                        });\n\n                })\n                .catch(error => {\n                    console.error({ error });\n                });\n        }\n\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     console.log(nextProps.match.params)\n    //     if (this.state.playlist)\n    //         if (nextProps.match.params.playlistId === this.state.playlist.id) {\n    //             return;\n    //         } else {\n    //             // this.componentDidMount()\n    //             this.render()\n    //         }\n    // }\n\n\n    render() {\n        if (this.state.playlist === null) return null;\n\n        let songDisplay = this.state.songs.map(song => {\n            return <Song track={song} key={song.id} />\n        })\n        return (\n\n            <div id=\"playlistDisplay\">\n                <div id=\"nav\">\n                    <Nav clicker={this.componentDidMount} />\n                </div>\n                <div id=\"playlistContent\">\n\n                    <h2>{this.state.playlist.title}</h2>\n                    {songDisplay}\n\n                    {/* <NoteError> */}\n                    {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                    {/* <p></p> */}\n                    {/* </NoteError> */}\n                    {/* </article> */}\n                </div>\n\n            </div>\n            // )\n            // {/* } */}\n            // }\n            // {/* </PlaylistContext.Consumer > */}\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}