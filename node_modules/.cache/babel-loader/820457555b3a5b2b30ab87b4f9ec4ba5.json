{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config'; // import './Landing.css'\n\nexport default class PlaylistDisplay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.setSongs = song => {\n      this.setState({\n        song: [...this.state.songs, song]\n      });\n    };\n\n    this.state = {\n      playlist: null,\n      songs: []\n    };\n  } // mountCount = () => {\n  //     this.setState({\n  //         thirdMount: this.state.thirdMount + 1\n  //     })\n  // }\n\n\n  componentDidMount() {\n    let playlistId = this.props.match.params.playlistId; // if (this.state.thirdMount === 3)\n\n    fetch(config.ENDPOINT + `/playlists/${playlistId}`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) return res.json().then(e => Promise.reject(e));\n      return res.json();\n    }).then(playlist => {\n      // this.setFetchTrue()\n      console.log(playlist);\n      this.setPlaylist(playlist);\n      fetch(config.ENDPOINT + `/playlistRecords/${playlistId}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res2 => {\n        if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n        return res2.json();\n      }).then(records => {\n        console.log(records);\n        let genres = [];\n\n        for (let i = 0; i < records.length; i++) {\n          let genreSearch = this.props.location.state.genres.find(record => {\n            return records[i].genre_id === record.id;\n          });\n          genres.push(genreSearch.name);\n        }\n\n        let limit = Math.floor(50 / genres.length);\n\n        let finalFetch = passedData => {\n          fetch(`${config.ENDPOINT}/data`, {\n            method: 'POST',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify(passedData)\n          }).then(res3 => {\n            if (!res3.ok) return res3.json().then(e => Promise.reject(e));\n            return res3.json();\n          }).then(tracks => {\n            console.log(tracks); // response = true\n          }).catch(error3 => {\n            console.error({\n              error3\n            });\n          });\n        };\n\n        for (let i = 0; i < genres.length; i += 2) {\n          let response = false;\n          console.log(genres[2]);\n          let rand = Math.floor(Math.random() * 1950);\n          let first = genres[i];\n          let second = genres[i + 1] !== undefined ? '+OR+' + genres[i + 1] : \"\"; // console\n\n          let queryString = 'genre:' + first + second + '&type=track&limit=' + limit + '&offset=' + rand;\n          console.log(queryString);\n          let fetData = {\n            qString: queryString\n          };\n          let chosen = [];\n\n          while (!response) {}\n\n          for (let i = 0; i < 5; i++) {\n            let rand = Math.floor(Math.random() * 50);\n            if (chosen.includes(rand)) i--;else chosen.push(rand);\n          }\n\n          console.log(chosen); // finalFetch(fetData)\n          // }\n        }\n      }).catch(error2 => {\n        console.error({\n          error2\n        });\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    }); // else\n    //     this.mountCount()\n    // setTimeout(this.fetcher(), 1000);\n    // console.log(\"running\")\n  } // fetcher() {\n  //     console.log(this.props.match.params)\n  //     let playlist = this.contextValue.playlists.find(lists => {\n  //         return lists.id === this.props.match.params.playlistId\n  //     })\n  //     console.log(playlist)\n  //     // return <div>{playlist}</div>\n  //     // return playlist\n  //     // fetch(config.ENDPOINT + '/data', {\n  //     //     method: 'POST',\n  //     //     headers: {\n  //     //         'content-type': 'application/json'\n  //     //     },\n  //     //     body: JSON.stringify(tinsel),\n  //     // })\n  //     //     .then(res => {\n  //     //         if (!res.ok)\n  //     //             return res.json().then(e => Promise.reject(e))\n  //     //         return res.json()\n  //     //     }).then(res => {\n  //     //         console.log(res)\n  //     //         // this.props.history.push(`/playlist-display/${created.id}`)\n  //     //     }).catch(error => {\n  //     //         console.error({ error })\n  //     //     })\n  //     // }\n  //     // }\n  //     // </PlaylistContext.Consumer>\n  // }\n\n\n  render() {\n    if (this.state.playlist === null) return null;\n    return /*#__PURE__*/React.createElement(PlaylistContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, value => {\n      this.contextValue = value;\n      console.log(value); // const output = value.notes.find(note =>\n      //     note.id === parseInt(this.props.match.params.noteId)\n      // )\n      // const folder = value.folders.find(folder =>\n      //     folder.id === output.folder_id\n      // )\n      // const playlistName = this.state.playlist.name\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"noteDisplay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 29\n        }\n      }, this.state.playlist.title), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 29\n        }\n      }));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js"],"names":["React","Component","Link","PlaylistContext","config","PlaylistDisplay","constructor","props","setPlaylist","playlist","setState","setSongs","song","state","songs","componentDidMount","playlistId","match","params","fetch","ENDPOINT","method","headers","then","res","ok","json","e","Promise","reject","console","log","res2","records","genres","i","length","genreSearch","location","find","record","genre_id","id","push","name","limit","Math","floor","finalFetch","passedData","body","JSON","stringify","res3","tracks","catch","error3","error","response","rand","random","first","second","undefined","queryString","fetData","qString","chosen","includes","error2","render","value","contextValue","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlist: null,\n            songs: []\n        }\n\n    }\n\n    // mountCount = () => {\n    //     this.setState({\n    //         thirdMount: this.state.thirdMount + 1\n    //     })\n    // }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    setSongs = (song) => {\n        this.setState({\n            song: [...this.state.songs, song]\n        })\n    }\n\n    componentDidMount() {\n        let playlistId = this.props.match.params.playlistId\n        // if (this.state.thirdMount === 3)\n        fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n            {\n                method: 'GET',\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(playlist => {\n                // this.setFetchTrue()\n                console.log(playlist)\n                this.setPlaylist(playlist)\n\n                fetch(config.ENDPOINT + `/playlistRecords/${playlistId}`,\n                    {\n                        method: 'GET',\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    })\n                    .then(res2 => {\n                        if (!res2.ok)\n                            return res2.json().then(e => Promise.reject(e))\n                        return res2.json()\n                    })\n                    .then(records => {\n\n                        console.log(records)\n\n                        let genres = []\n\n                        for (let i = 0; i < records.length; i++) {\n                            let genreSearch = this.props.location.state.genres.find(record => {\n                                return records[i].genre_id === record.id\n                            })\n                            genres.push(genreSearch.name)\n                        }\n                        let limit = Math.floor(50 / genres.length)\n\n                        let finalFetch = (passedData) => {\n                            fetch(`${config.ENDPOINT}/data`, {\n                                method: 'POST',\n                                headers: {\n                                    'content-type': 'application/json'\n                                },\n                                body: JSON.stringify(passedData),\n                            })\n                                .then(res3 => {\n                                    if (!res3.ok)\n                                        return res3.json().then(e => Promise.reject(e))\n                                    return res3.json()\n                                }).then(tracks => {\n                                    console.log(tracks)\n                                    // response = true\n                                }).catch(error3 => {\n                                    console.error({ error3 })\n                                })\n                        }\n\n                        for (let i = 0; i < genres.length; i += 2) {\n                            let response = false;\n\n                            console.log(genres[2])\n                            let rand = Math.floor(Math.random() * 1950);\n                            let first = genres[i]\n                            let second = ((genres[i + 1] !== undefined) ? '+OR+' + genres[i + 1] : \"\")\n                            // console\n                            let queryString = 'genre:' + first + second + '&type=track&limit=' + limit + '&offset=' + rand\n\n                            console.log(queryString)\n                            let fetData = {\n                                qString: queryString,\n\n                            }\n                            let chosen = []\n                            while (!response) {\n\n                            }\n                            for (let i = 0; i < 5; i++) {\n                                let rand = Math.floor(Math.random() * 50);\n                                if (chosen.includes(rand))\n                                    i--\n                                else\n                                    chosen.push(rand)\n                            }\n                            console.log(chosen)\n                            // finalFetch(fetData)\n\n                            // }\n                        }\n                    }).catch(error2 => {\n                        console.error({ error2 });\n                    });\n\n\n            })\n            .catch(error => {\n                console.error({ error });\n            });\n        // else\n        //     this.mountCount()\n        // setTimeout(this.fetcher(), 1000);\n        // console.log(\"running\")\n    }\n\n    // fetcher() {\n    //     console.log(this.props.match.params)\n    //     let playlist = this.contextValue.playlists.find(lists => {\n    //         return lists.id === this.props.match.params.playlistId\n    //     })\n    //     console.log(playlist)\n    //     // return <div>{playlist}</div>\n    //     // return playlist\n    //     // fetch(config.ENDPOINT + '/data', {\n    //     //     method: 'POST',\n    //     //     headers: {\n    //     //         'content-type': 'application/json'\n    //     //     },\n    //     //     body: JSON.stringify(tinsel),\n    //     // })\n    //     //     .then(res => {\n\n    //     //         if (!res.ok)\n    //     //             return res.json().then(e => Promise.reject(e))\n    //     //         return res.json()\n    //     //     }).then(res => {\n    //     //         console.log(res)\n    //     //         // this.props.history.push(`/playlist-display/${created.id}`)\n    //     //     }).catch(error => {\n    //     //         console.error({ error })\n    //     //     })\n    //     // }\n    //     // }\n\n    //     // </PlaylistContext.Consumer>\n\n    // }\n    render() {\n        if (this.state.playlist === null) return null;\n        return (\n            <PlaylistContext.Consumer>\n\n                {(value) => {\n                    this.contextValue = value\n                    console.log(value)\n                    // const output = value.notes.find(note =>\n                    //     note.id === parseInt(this.props.match.params.noteId)\n                    // )\n\n                    // const folder = value.folders.find(folder =>\n                    //     folder.id === output.folder_id\n                    // )\n\n                    // const playlistName = this.state.playlist.name\n\n                    return (\n                        <div id=\"noteDisplay\">\n                            <h2>{this.state.playlist.title}</h2>\n                            {/* <article className=\"displayed\"> */}\n\n                            {/* <NoteError> */}\n                            {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                            <p></p>\n                            {/* </NoteError> */}\n                            {/* </article> */}\n                        </div>\n                    )\n                }\n                }\n            </PlaylistContext.Consumer >\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}