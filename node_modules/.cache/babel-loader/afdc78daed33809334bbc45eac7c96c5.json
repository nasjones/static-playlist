{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config'; // import './Landing.css'\n\nexport default class PlaylistDisplay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.state = {\n      playlist: null\n    };\n  } // mountCount = () => {\n  //     this.setState({\n  //         thirdMount: this.state.thirdMount + 1\n  //     })\n  // }\n\n\n  componentDidMount() {\n    let playlistId = this.props.match.params.playlistId; // if (this.state.thirdMount === 3)\n\n    fetch(config.ENDPOINT + `/playlists/${playlistId}`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) return res.json().then(e => Promise.reject(e));\n      return res.json();\n    }).then(playlist => {\n      // this.setFetchTrue()\n      console.log(playlist);\n      this.setPlaylist(playlist);\n      fetch(config.ENDPOINT + `/playlistRecords/${playlistId}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res2 => {\n        if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n        return res2.json();\n      }).then(records => {\n        console.log(records);\n        fetch(config.ENDPOINT + `/playlistRecords/${playlistId}`, {\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json'\n          }\n        }).then(res3 => {\n          if (!res3.ok) return res3.json().then(e => Promise.reject(e));\n          return res3.json();\n        }).then(records => {\n          console.log(records);\n        }).catch(error3 => {\n          console.error({\n            error3\n          });\n        });\n      }).catch(error2 => {\n        console.error({\n          error2\n        });\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    }); // else\n    //     this.mountCount()\n    // setTimeout(this.fetcher(), 1000);\n    // console.log(\"running\")\n  } // fetcher() {\n  //     console.log(this.props.match.params)\n  //     let playlist = this.contextValue.playlists.find(lists => {\n  //         return lists.id === this.props.match.params.playlistId\n  //     })\n  //     console.log(playlist)\n  //     // return <div>{playlist}</div>\n  //     // return playlist\n  //     // fetch(config.ENDPOINT + '/data', {\n  //     //     method: 'POST',\n  //     //     headers: {\n  //     //         'content-type': 'application/json'\n  //     //     },\n  //     //     body: JSON.stringify(tinsel),\n  //     // })\n  //     //     .then(res => {\n  //     //         if (!res.ok)\n  //     //             return res.json().then(e => Promise.reject(e))\n  //     //         return res.json()\n  //     //     }).then(res => {\n  //     //         console.log(res)\n  //     //         // this.props.history.push(`/playlist-display/${created.id}`)\n  //     //     }).catch(error => {\n  //     //         console.error({ error })\n  //     //     })\n  //     // }\n  //     // }\n  //     // </PlaylistContext.Consumer>\n  // }\n\n\n  render() {\n    if (this.state.playlist === null) return null;\n    return /*#__PURE__*/React.createElement(PlaylistContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, value => {\n      this.contextValue = value;\n      console.log(value); // const output = value.notes.find(note =>\n      //     note.id === parseInt(this.props.match.params.noteId)\n      // )\n      // const folder = value.folders.find(folder =>\n      //     folder.id === output.folder_id\n      // )\n      // const playlistName = this.state.playlist.name\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"noteDisplay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }\n      }, this.state.playlist.title), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }\n      }));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js"],"names":["React","Component","Link","PlaylistContext","config","PlaylistDisplay","constructor","props","setPlaylist","playlist","setState","state","componentDidMount","playlistId","match","params","fetch","ENDPOINT","method","headers","then","res","ok","json","e","Promise","reject","console","log","res2","records","res3","catch","error3","error","error2","render","value","contextValue","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlist: null\n        }\n\n    }\n\n    // mountCount = () => {\n    //     this.setState({\n    //         thirdMount: this.state.thirdMount + 1\n    //     })\n    // }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    componentDidMount() {\n        let playlistId = this.props.match.params.playlistId\n        // if (this.state.thirdMount === 3)\n        fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n            {\n                method: 'GET',\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(playlist => {\n                // this.setFetchTrue()\n                console.log(playlist)\n                this.setPlaylist(playlist)\n\n                fetch(config.ENDPOINT + `/playlistRecords/${playlistId}`,\n                    {\n                        method: 'GET',\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    })\n                    .then(res2 => {\n                        if (!res2.ok)\n                            return res2.json().then(e => Promise.reject(e))\n                        return res2.json()\n                    })\n                    .then(records => {\n                        console.log(records)\n\n                        fetch(config.ENDPOINT + `/playlistRecords/${playlistId}`,\n                            {\n                                method: 'GET',\n                                headers: {\n                                    'content-type': 'application/json'\n                                }\n                            })\n                            .then(res3 => {\n                                if (!res3.ok)\n                                    return res3.json().then(e => Promise.reject(e))\n                                return res3.json()\n                            })\n                            .then(records => {\n                                console.log(records)\n\n\n\n                            }).catch(error3 => {\n                                console.error({ error3 });\n                            });\n\n\n                    }).catch(error2 => {\n                        console.error({ error2 });\n                    });\n\n            })\n            .catch(error => {\n                console.error({ error });\n            });\n        // else\n        //     this.mountCount()\n        // setTimeout(this.fetcher(), 1000);\n        // console.log(\"running\")\n    }\n\n    // fetcher() {\n    //     console.log(this.props.match.params)\n    //     let playlist = this.contextValue.playlists.find(lists => {\n    //         return lists.id === this.props.match.params.playlistId\n    //     })\n    //     console.log(playlist)\n    //     // return <div>{playlist}</div>\n    //     // return playlist\n    //     // fetch(config.ENDPOINT + '/data', {\n    //     //     method: 'POST',\n    //     //     headers: {\n    //     //         'content-type': 'application/json'\n    //     //     },\n    //     //     body: JSON.stringify(tinsel),\n    //     // })\n    //     //     .then(res => {\n\n    //     //         if (!res.ok)\n    //     //             return res.json().then(e => Promise.reject(e))\n    //     //         return res.json()\n    //     //     }).then(res => {\n    //     //         console.log(res)\n    //     //         // this.props.history.push(`/playlist-display/${created.id}`)\n    //     //     }).catch(error => {\n    //     //         console.error({ error })\n    //     //     })\n    //     // }\n    //     // }\n\n    //     // </PlaylistContext.Consumer>\n\n    // }\n    render() {\n        if (this.state.playlist === null) return null;\n        return (\n            <PlaylistContext.Consumer>\n\n                {(value) => {\n                    this.contextValue = value\n                    console.log(value)\n                    // const output = value.notes.find(note =>\n                    //     note.id === parseInt(this.props.match.params.noteId)\n                    // )\n\n                    // const folder = value.folders.find(folder =>\n                    //     folder.id === output.folder_id\n                    // )\n\n                    // const playlistName = this.state.playlist.name\n\n                    return (\n                        <div id=\"noteDisplay\">\n                            <h2>{this.state.playlist.title}</h2>\n                            {/* <article className=\"displayed\"> */}\n\n                            {/* <NoteError> */}\n                            {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                            <p></p>\n                            {/* </NoteError> */}\n                            {/* </article> */}\n                        </div>\n                    )\n                }\n                }\n            </PlaylistContext.Consumer >\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}