{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config'; // import './Landing.css'\n\nexport default class PlaylistDisplay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.addSongs = song => {\n      this.setState({\n        song: [...this.state.songs, song]\n      });\n    };\n\n    this.state = {\n      playlist: null,\n      songs: []\n    };\n  }\n\n  componentDidMount() {\n    let playlistId = this.props.match.params.playlistId; // if (this.state.thirdMount === 3)\n\n    fetch(config.ENDPOINT + `/playlists/${playlistId}`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) return res.json().then(e => Promise.reject(e));\n      return res.json();\n    }).then(playlist => {\n      // this.setFetchTrue()\n      console.log(playlist);\n      this.setPlaylist(playlist);\n      fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res2 => {\n        if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n        return res2.json();\n      }).then(genre => {\n        console.log(records);\n        let genres = [];\n        let runtime = 0;\n\n        for (let i = 0; i < records.length; i++) {\n          let genreSearch = this.props.location.state.genres.find(record => {\n            return records[i].genre_id === record.id;\n          });\n          genres.push(genreSearch.name);\n        }\n\n        console.log(genres);\n        let rand = Math.floor(Math.random() * 30);\n        console.log(rand);\n        let first = genres[0];\n        let second = genres[1] !== undefined ? '%20OR%20' + genres[1] : \"\";\n        let queryString = 'genre:%20' + first + second + '&type=track&limit=50&offset=' + rand;\n        let fetData = {\n          qString: queryString\n        };\n        fetch(`${config.ENDPOINT}/data`, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(fetData)\n        }).then(res4 => {\n          if (!res4.ok) return res4.json().then(e => Promise.reject(e));\n          return res4.json();\n        }).then(response => {\n          console.log(response);\n          let chosen = [];\n\n          for (let i = 0; i < 5; i++) {\n            let rand = Math.floor(Math.random() * 50);\n            if (chosen.includes(rand)) i--;else {\n              chosen.push(rand);\n              let song = {\n                url: response.tracks.items[rand].external_urls.spotify,\n                title: response.tracks.items[rand].name,\n                length: response.tracks.items[rand].duration_ms,\n                explicit: response.tracks.items[rand].explicit\n              };\n              this.addSongs(song);\n            }\n          }\n        }).catch(error3 => {\n          console.error({\n            error3\n          });\n        });\n      }).catch(error2 => {\n        console.error({\n          error2\n        });\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    }); // else\n    //     this.mountCount()\n    // setTimeout(this.fetcher(), 1000);\n    // console.log(\"running\")\n  } // fetcher() {\n  //     console.log(this.props.match.params)\n  //     let playlist = this.contextValue.playlists.find(lists => {\n  //         return lists.id === this.props.match.params.playlistId\n  //     })\n  //     console.log(playlist)\n  //     // return <div>{playlist}</div>\n  //     // return playlist\n  //     // fetch(config.ENDPOINT + '/data', {\n  //     //     method: 'POST',\n  //     //     headers: {\n  //     //         'content-type': 'application/json'\n  //     //     },\n  //     //     body: JSON.stringify(tinsel),\n  //     // })\n  //     //     .then(res => {\n  //     //         if (!res.ok)\n  //     //             return res.json().then(e => Promise.reject(e))\n  //     //         return res.json()\n  //     //     }).then(res => {\n  //     //         console.log(res)\n  //     //         // this.props.history.push(`/playlist-display/${created.id}`)\n  //     //     }).catch(error => {\n  //     //         console.error({ error })\n  //     //     })\n  //     // }\n  //     // }\n  //     // </PlaylistContext.Consumer>\n  // }\n\n\n  render() {\n    if (this.state.playlist === null) return null;\n    return /*#__PURE__*/React.createElement(PlaylistContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, value => {\n      this.contextValue = value;\n      console.log(value); // const output = value.notes.find(note =>\n      //     note.id === parseInt(this.props.match.params.noteId)\n      // )\n      // const folder = value.folders.find(folder =>\n      //     folder.id === output.folder_id\n      // )\n      // const playlistName = this.state.playlist.name\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"noteDisplay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }\n      }, this.state.playlist.title), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 29\n        }\n      }));\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js"],"names":["React","Component","Link","PlaylistContext","config","PlaylistDisplay","constructor","props","setPlaylist","playlist","setState","addSongs","song","state","songs","componentDidMount","playlistId","match","params","fetch","ENDPOINT","method","headers","then","res","ok","json","e","Promise","reject","console","log","genre_id","res2","genre","records","genres","runtime","i","length","genreSearch","location","find","record","id","push","name","rand","Math","floor","random","first","second","undefined","queryString","fetData","qString","body","JSON","stringify","res4","response","chosen","includes","url","tracks","items","external_urls","spotify","title","duration_ms","explicit","catch","error3","error","error2","render","value","contextValue"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlist: null,\n            songs: []\n        }\n\n    }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    addSongs = (song) => {\n        this.setState({\n            song: [...this.state.songs, song]\n        })\n    }\n\n    componentDidMount() {\n        let playlistId = this.props.match.params.playlistId\n        // if (this.state.thirdMount === 3)\n        fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n            {\n                method: 'GET',\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(playlist => {\n                // this.setFetchTrue()\n                console.log(playlist)\n                this.setPlaylist(playlist)\n\n                fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n                    {\n                        method: 'GET',\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    })\n                    .then(res2 => {\n                        if (!res2.ok)\n                            return res2.json().then(e => Promise.reject(e))\n                        return res2.json()\n                    })\n                    .then(genre => {\n\n                        console.log(records)\n\n                        let genres = []\n                        let runtime = 0\n                        for (let i = 0; i < records.length; i++) {\n                            let genreSearch = this.props.location.state.genres.find(record => {\n                                return records[i].genre_id === record.id\n                            })\n                            genres.push(genreSearch.name)\n                        }\n\n                        console.log(genres)\n                        let rand = Math.floor(Math.random() * 30);\n                        console.log(rand)\n                        let first = genres[0]\n                        let second = ((genres[1] !== undefined) ? '%20OR%20' + genres[1] : \"\")\n                        let queryString = 'genre:%20' + first + second + '&type=track&limit=50&offset=' + rand\n\n\n                        let fetData = {\n                            qString: queryString,\n                        }\n\n\n                        fetch(`${config.ENDPOINT}/data`, {\n                            method: 'POST',\n                            headers: {\n                                'content-type': 'application/json'\n                            },\n                            body: JSON.stringify(fetData),\n                        })\n                            .then(res4 => {\n                                if (!res4.ok)\n                                    return res4.json().then(e => Promise.reject(e))\n                                return res4.json()\n                            }).then(response => {\n                                console.log(response)\n                                let chosen = []\n                                for (let i = 0; i < 5; i++) {\n                                    let rand = Math.floor(Math.random() * 50);\n                                    if (chosen.includes(rand))\n                                        i--\n                                    else {\n                                        chosen.push(rand)\n\n\n                                        let song = {\n                                            url: response.tracks.items[rand].external_urls.spotify,\n                                            title: response.tracks.items[rand].name,\n                                            length: response.tracks.items[rand].duration_ms,\n                                            explicit: response.tracks.items[rand].explicit\n                                        }\n\n                                        this.addSongs(song)\n\n                                    }\n                                }\n\n                            }).catch(error3 => {\n                                console.error({ error3 })\n                            })\n\n\n\n\n                    }).catch(error2 => {\n                        console.error({ error2 });\n                    });\n\n            })\n            .catch(error => {\n                console.error({ error });\n            });\n        // else\n        //     this.mountCount()\n        // setTimeout(this.fetcher(), 1000);\n        // console.log(\"running\")\n    }\n\n    // fetcher() {\n    //     console.log(this.props.match.params)\n    //     let playlist = this.contextValue.playlists.find(lists => {\n    //         return lists.id === this.props.match.params.playlistId\n    //     })\n    //     console.log(playlist)\n    //     // return <div>{playlist}</div>\n    //     // return playlist\n    //     // fetch(config.ENDPOINT + '/data', {\n    //     //     method: 'POST',\n    //     //     headers: {\n    //     //         'content-type': 'application/json'\n    //     //     },\n    //     //     body: JSON.stringify(tinsel),\n    //     // })\n    //     //     .then(res => {\n\n    //     //         if (!res.ok)\n    //     //             return res.json().then(e => Promise.reject(e))\n    //     //         return res.json()\n    //     //     }).then(res => {\n    //     //         console.log(res)\n    //     //         // this.props.history.push(`/playlist-display/${created.id}`)\n    //     //     }).catch(error => {\n    //     //         console.error({ error })\n    //     //     })\n    //     // }\n    //     // }\n\n    //     // </PlaylistContext.Consumer>\n\n    // }\n    render() {\n        if (this.state.playlist === null) return null;\n        return (\n            <PlaylistContext.Consumer>\n\n                {(value) => {\n                    this.contextValue = value\n                    console.log(value)\n                    // const output = value.notes.find(note =>\n                    //     note.id === parseInt(this.props.match.params.noteId)\n                    // )\n\n                    // const folder = value.folders.find(folder =>\n                    //     folder.id === output.folder_id\n                    // )\n\n                    // const playlistName = this.state.playlist.name\n\n                    return (\n                        <div id=\"noteDisplay\">\n                            <h2>{this.state.playlist.title}</h2>\n                            {/* <article className=\"displayed\"> */}\n\n                            {/* <NoteError> */}\n                            {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                            <p></p>\n                            {/* </NoteError> */}\n                            {/* </article> */}\n                        </div>\n                    )\n                }\n                }\n            </PlaylistContext.Consumer >\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}