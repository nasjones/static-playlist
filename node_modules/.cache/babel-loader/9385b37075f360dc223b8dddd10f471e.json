{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config';\nimport Song from './Song';\nimport './Playlist-Display.css'; // import './Landing.css'\n\nexport default class PlaylistDisplay extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.addSongs = song => {\n      this.setState({\n        songs: [...this.state.songs, song]\n      });\n    };\n\n    this.state = {\n      playlist: null,\n      songs: []\n    };\n  }\n\n  componentDidMount() {\n    let playlistId = this.props.match.params.playlistId;\n    fetch(config.ENDPOINT + `/playlists/${playlistId}`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) return res.json().then(e => Promise.reject(e));\n      return res.json();\n    }).then(playlist => {\n      console.log(playlist);\n      this.setPlaylist(playlist);\n      fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json'\n        }\n      }).then(res2 => {\n        if (!res2.ok) return res2.json().then(e => Promise.reject(e));\n        return res2.json();\n      }).then(genre => {\n        let rand = Math.floor(Math.random() * 1950);\n        let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand;\n        let fetData = {\n          qString: queryString\n        };\n        fetch(`${config.ENDPOINT}/data`, {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(fetData)\n        }).then(res3 => {\n          if (!res3.ok) return res3.json().then(e => Promise.reject(e));\n          return res3.json();\n        }).then(response => {\n          console.log(response.tracks);\n          let runtime = 0;\n          let chosen = [];\n\n          while (runtime < playlist.length) {\n            let trackChoice = Math.floor(Math.random() * 50);\n\n            if (!chosen.includes(trackChoice)) {\n              chosen.push(trackChoice);\n              let artists = response.tracks.items[trackChoice].artists;\n              let song = {\n                url: response.tracks.items[trackChoice].external_urls.spotify,\n                title: response.tracks.items[trackChoice].name,\n                length: response.tracks.items[trackChoice].duration_ms,\n                explicit: response.tracks.items[trackChoice].explicit\n              };\n              console.log(song);\n              runtime += song.length;\n              this.addSongs(song);\n            }\n          }\n\n          console.log(runtime);\n        }).catch(error3 => {\n          console.error({\n            error3\n          });\n        });\n      }).catch(error2 => {\n        console.error({\n          error2\n        });\n      });\n    }).catch(error => {\n      console.error({\n        error\n      });\n    }); // else\n    //     this.mountCount()\n    // setTimeout(this.fetcher(), 1000);\n    // console.log(\"running\")\n  }\n\n  render() {\n    if (this.state.playlist === null) return null;\n    let songDisplay = this.state.songs.map(song => {\n      return /*#__PURE__*/React.createElement(Song, {\n        track: song,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 20\n        }\n      });\n    });\n    return (\n      /*#__PURE__*/\n      // <PlaylistContext.Consumer>\n      // {/* {(value) => { */}\n      // return (\n      React.createElement(\"div\", {\n        id: \"playlistDisplay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }, this.state.playlist.title), songDisplay) // )\n      // {/* } */}\n      // }\n      // {/* </PlaylistContext.Consumer > */}\n\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js"],"names":["React","Component","Link","PlaylistContext","config","Song","PlaylistDisplay","constructor","props","setPlaylist","playlist","setState","addSongs","song","songs","state","componentDidMount","playlistId","match","params","fetch","ENDPOINT","method","headers","then","res","ok","json","e","Promise","reject","console","log","genre_id","res2","genre","rand","Math","floor","random","queryString","name","fetData","qString","body","JSON","stringify","res3","response","tracks","runtime","chosen","length","trackChoice","includes","push","artists","items","url","external_urls","spotify","title","duration_ms","explicit","catch","error3","error","error2","render","songDisplay","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\nimport Song from './Song'\nimport './Playlist-Display.css'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlist: null,\n            songs: []\n        }\n\n    }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    addSongs = (song) => {\n        this.setState({\n            songs: [...this.state.songs, song]\n        })\n    }\n\n    componentDidMount() {\n        let playlistId = this.props.match.params.playlistId\n        fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n            {\n                method: 'GET',\n                headers: {\n                    'content-type': 'application/json'\n                }\n            })\n            .then(res => {\n                if (!res.ok)\n                    return res.json().then(e => Promise.reject(e))\n                return res.json()\n            })\n            .then(playlist => {\n                console.log(playlist)\n                this.setPlaylist(playlist)\n\n                fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n                    {\n                        method: 'GET',\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    })\n                    .then(res2 => {\n                        if (!res2.ok)\n                            return res2.json().then(e => Promise.reject(e))\n                        return res2.json()\n                    })\n                    .then(genre => {\n                        let rand = Math.floor(Math.random() * 1950);\n                        let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n\n                        let fetData = {\n                            qString: queryString,\n                        }\n\n                        fetch(`${config.ENDPOINT}/data`, {\n                            method: 'POST',\n                            headers: {\n                                'content-type': 'application/json'\n                            },\n                            body: JSON.stringify(fetData),\n                        })\n                            .then(res3 => {\n                                if (!res3.ok)\n                                    return res3.json().then(e => Promise.reject(e))\n                                return res3.json()\n                            }).then(response => {\n                                console.log(response.tracks)\n                                let runtime = 0\n                                let chosen = []\n\n                                while (runtime < playlist.length) {\n\n                                    let trackChoice = Math.floor(Math.random() * 50);\n                                    if (!chosen.includes(trackChoice)) {\n                                        chosen.push(trackChoice)\n                                        let artists = response.tracks.items[trackChoice].artists\n\n                                        let song = {\n                                            url: response.tracks.items[trackChoice].external_urls.spotify,\n                                            title: response.tracks.items[trackChoice].name,\n                                            length: response.tracks.items[trackChoice].duration_ms,\n                                            explicit: response.tracks.items[trackChoice].explicit\n                                        }\n                                        console.log(song)\n                                        runtime += song.length\n                                        this.addSongs(song)\n\n                                    }\n\n                                }\n                                console.log(runtime)\n\n                            }).catch(error3 => {\n                                console.error({ error3 })\n                            })\n\n\n\n\n                    }).catch(error2 => {\n                        console.error({ error2 });\n                    });\n\n            })\n            .catch(error => {\n                console.error({ error });\n            });\n        // else\n        //     this.mountCount()\n        // setTimeout(this.fetcher(), 1000);\n        // console.log(\"running\")\n    }\n\n\n    render() {\n        if (this.state.playlist === null) return null;\n\n        let songDisplay = this.state.songs.map(song => {\n            return <Song track={song} />\n        })\n        return (\n            // <PlaylistContext.Consumer>\n\n            // {/* {(value) => { */}\n\n            // return (\n            <div id=\"playlistDisplay\">\n                <h2>{this.state.playlist.title}</h2>\n                {songDisplay}\n\n                {/* <NoteError> */}\n                {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                {/* <p></p> */}\n                {/* </NoteError> */}\n                {/* </article> */}\n            </div>\n            // )\n            // {/* } */}\n            // }\n            // {/* </PlaylistContext.Consumer > */}\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}