{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport PlaylistContext from '../PlaylistContext';\nimport config from '../config';\nimport Song from './Song';\nimport Nav from '../Nav';\nimport './Playlist-Display.css'; // import './Landing.css'\n\nexport default class PlaylistDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this._isMounted = false;\n\n    this.setPlaylistId = playlistId => {\n      this.setState({\n        playlistId\n      });\n    };\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.addSongs = song => {\n      this.setState({\n        songs: [...this.state.songs, song]\n      });\n      console.log(this.state.songs);\n    };\n\n    this.mounter = value => {\n      let playlistOut = value.playlist.find(playlist => {\n        return playlist.id === this.props.match.params.playlistId;\n      });\n      this.setPlaylist(playlistOut);\n    };\n\n    this.state = {\n      playlistId: this.props.match.params.playlistId,\n      playlist: null,\n      songs: [],\n      isFlushed: false\n    };\n    console.log(this.state.songs);\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    let playlistId = this.props.match.params.playlistId;\n    console.log(playlistId); // if (this._isMounted) {\n    //     fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n    //         {\n    //             method: 'GET',\n    //             headers: {\n    //                 'content-type': 'application/json'\n    //             }\n    //         })\n    //         .then(res => {\n    //             if (!res.ok)\n    //                 return res.json().then(e => Promise.reject(e))\n    //             return res.json()\n    //         })\n    //         .then(playlist => {\n    //             console.log(playlist)\n    //             this.setPlaylist(playlist)\n    //             fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n    //                 {\n    //                     method: 'GET',\n    //                     headers: {\n    //                         'content-type': 'application/json'\n    //                     }\n    //                 })\n    //                 .then(res2 => {\n    //                     if (!res2.ok)\n    //                         return res2.json().then(e => Promise.reject(e))\n    //                     return res2.json()\n    //                 })\n    //                 .then(genre => {\n    //                     let rand = Math.floor(Math.random() * 1950);\n    //                     let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n    //                     let fetData = {\n    //                         qString: queryString,\n    //                     }\n    //                     fetch(`${config.ENDPOINT}/data`, {\n    //                         method: 'POST',\n    //                         headers: {\n    //                             'content-type': 'application/json'\n    //                         },\n    //                         body: JSON.stringify(fetData),\n    //                     })\n    //                         .then(res3 => {\n    //                             if (!res3.ok)\n    //                                 return res3.json().then(e => Promise.reject(e))\n    //                             return res3.json()\n    //                         }).then(response => {\n    //                             console.log(response.tracks)\n    //                             let runtime = 0\n    //                             let chosen = []\n    //                             while (runtime < playlist.length) {\n    //                                 let trackChoice = Math.floor(Math.random() * 50);\n    //                                 if (!chosen.includes(trackChoice)) {\n    //                                     chosen.push(trackChoice)\n    //                                     let artists = []\n    //                                     for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++)\n    //                                         artists.push(response.tracks.items[trackChoice].artists[i].name)\n    //                                     let song = {\n    //                                         id: response.tracks.items[trackChoice].id,\n    //                                         url: response.tracks.items[trackChoice].external_urls.spotify,\n    //                                         title: response.tracks.items[trackChoice].name,\n    //                                         length: response.tracks.items[trackChoice].duration_ms,\n    //                                         explicit: response.tracks.items[trackChoice].explicit,\n    //                                         artist: artists\n    //                                     }\n    //                                     // console.log(song)\n    //                                     runtime += song.length\n    //                                     this.addSongs(song)\n    //                                 }\n    //                             }\n    //                         }).catch(error3 => {\n    //                             console.error({ error3 })\n    //                         })\n    //                 }).catch(error2 => {\n    //                     console.error({ error2 });\n    //                 });\n    //         })\n    //         .catch(error => {\n    //             console.error({ error });\n    //         });\n    // }\n  }\n\n  componentWillReceiveProps(nextProps) {// console.log(nextProps.match.params)\n    // if (this.state.playlist)\n    //     if (nextProps.match.params.playlistId === this.state.playlistId) {\n    //         return;\n    //     } else {\n    //         this.setState({ playlistId: nextProps.match.params.playlistId })\n    //         // this.componentDidMount()\n    //         // this.render()\n    //     }\n    // else {\n    //     this.setState({ playlistId: nextProps.match.params.playlistId })\n    //     // this.componentDidMount()\n    //     // this.render()\n    // }\n  }\n\n  render() {\n    if (this.state.playlist === null) return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 50\n      }\n    }, \"Loading..\");\n    let songDisplay = this.state.songs.map(song => {\n      return /*#__PURE__*/React.createElement(Song, {\n        track: song,\n        key: song.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 20\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"playlistDisplay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Nav, {\n      clicker: this.setPlaylistId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"playlistContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"playlist-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }, this.state.playlist.title), songDisplay)) // )\n    // {/* } */}\n    // }\n    // {/* </PlaylistContext.Consumer > */}\n    ;\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/playlist-maker-app/src/Playlists/Playlist-Display.js"],"names":["React","Component","Link","withRouter","PlaylistContext","config","Song","Nav","PlaylistDisplay","constructor","props","_isMounted","setPlaylistId","playlistId","setState","setPlaylist","playlist","addSongs","song","songs","state","console","log","mounter","value","playlistOut","find","id","match","params","isFlushed","componentDidMount","componentWillReceiveProps","nextProps","render","songDisplay","map","title"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport PlaylistContext from '../PlaylistContext'\nimport config from '../config'\nimport Song from './Song'\nimport Nav from '../Nav'\nimport './Playlist-Display.css'\n// import './Landing.css'\n\n\nexport default class PlaylistDisplay extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlistId: this.props.match.params.playlistId,\n            playlist: null,\n            songs: [],\n            isFlushed: false\n        }\n        console.log(this.state.songs)\n    }\n\n    setPlaylistId = (playlistId) => {\n        this.setState({ playlistId })\n    }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    addSongs = (song) => {\n        this.setState({\n            songs: [...this.state.songs, song]\n        })\n        console.log(this.state.songs)\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        let playlistId = this.props.match.params.playlistId\n        console.log(playlistId)\n\n        // if (this._isMounted) {\n        //     fetch(config.ENDPOINT + `/playlists/${playlistId}`,\n        //         {\n        //             method: 'GET',\n        //             headers: {\n        //                 'content-type': 'application/json'\n        //             }\n        //         })\n        //         .then(res => {\n        //             if (!res.ok)\n        //                 return res.json().then(e => Promise.reject(e))\n        //             return res.json()\n        //         })\n        //         .then(playlist => {\n        //             console.log(playlist)\n        //             this.setPlaylist(playlist)\n\n        //             fetch(config.ENDPOINT + `/genres/${playlist.genre_id}`,\n        //                 {\n        //                     method: 'GET',\n        //                     headers: {\n        //                         'content-type': 'application/json'\n        //                     }\n        //                 })\n        //                 .then(res2 => {\n        //                     if (!res2.ok)\n        //                         return res2.json().then(e => Promise.reject(e))\n        //                     return res2.json()\n        //                 })\n        //                 .then(genre => {\n        //                     let rand = Math.floor(Math.random() * 1950);\n        //                     let queryString = 'genre:%20' + genre.name + '&type=track&limit=50&offset=' + rand\n\n        //                     let fetData = {\n        //                         qString: queryString,\n        //                     }\n\n        //                     fetch(`${config.ENDPOINT}/data`, {\n        //                         method: 'POST',\n        //                         headers: {\n        //                             'content-type': 'application/json'\n        //                         },\n        //                         body: JSON.stringify(fetData),\n        //                     })\n        //                         .then(res3 => {\n        //                             if (!res3.ok)\n        //                                 return res3.json().then(e => Promise.reject(e))\n        //                             return res3.json()\n        //                         }).then(response => {\n        //                             console.log(response.tracks)\n        //                             let runtime = 0\n        //                             let chosen = []\n\n        //                             while (runtime < playlist.length) {\n\n        //                                 let trackChoice = Math.floor(Math.random() * 50);\n\n        //                                 if (!chosen.includes(trackChoice)) {\n        //                                     chosen.push(trackChoice)\n        //                                     let artists = []\n        //                                     for (let i = 0; i < response.tracks.items[trackChoice].artists.length; i++)\n        //                                         artists.push(response.tracks.items[trackChoice].artists[i].name)\n\n        //                                     let song = {\n        //                                         id: response.tracks.items[trackChoice].id,\n        //                                         url: response.tracks.items[trackChoice].external_urls.spotify,\n        //                                         title: response.tracks.items[trackChoice].name,\n        //                                         length: response.tracks.items[trackChoice].duration_ms,\n        //                                         explicit: response.tracks.items[trackChoice].explicit,\n        //                                         artist: artists\n        //                                     }\n        //                                     // console.log(song)\n        //                                     runtime += song.length\n        //                                     this.addSongs(song)\n\n        //                                 }\n\n        //                             }\n\n        //                         }).catch(error3 => {\n        //                             console.error({ error3 })\n        //                         })\n\n        //                 }).catch(error2 => {\n        //                     console.error({ error2 });\n        //                 });\n\n        //         })\n        //         .catch(error => {\n        //             console.error({ error });\n        //         });\n        // }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // console.log(nextProps.match.params)\n        // if (this.state.playlist)\n        //     if (nextProps.match.params.playlistId === this.state.playlistId) {\n        //         return;\n        //     } else {\n        //         this.setState({ playlistId: nextProps.match.params.playlistId })\n        //         // this.componentDidMount()\n        //         // this.render()\n        //     }\n\n        // else {\n        //     this.setState({ playlistId: nextProps.match.params.playlistId })\n        //     // this.componentDidMount()\n        //     // this.render()\n        // }\n    }\n\n    mounter = (value) => {\n        let playlistOut = value.playlist.find(playlist => {\n            return playlist.id === this.props.match.params.playlistId\n        })\n        this.setPlaylist(playlistOut)\n    }\n\n\n    render() {\n        if (this.state.playlist === null) return <h1>Loading..</h1>;\n\n        let songDisplay = this.state.songs.map(song => {\n            return <Song track={song} key={song.id} />\n        })\n        return (\n\n            <div id=\"playlistDisplay\">\n                <div id=\"nav\">\n                    <Nav clicker={this.setPlaylistId} />\n                </div>\n                <div id=\"playlistContent\">\n\n                    <h2 id=\"playlist-title\">{this.state.playlist.title}</h2>\n                    {songDisplay}\n\n                    {/* <NoteError> */}\n                    {/* <Note id={output.id} name={output.name} content={output.content} mod={output.modified} key={output.id} history={this.props.history} /> */}\n                    {/* <p></p> */}\n                    {/* </NoteError> */}\n                    {/* </article> */}\n                </div>\n\n            </div>\n            // )\n            // {/* } */}\n            // }\n            // {/* </PlaylistContext.Consumer > */}\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}