{"ast":null,"code":"var _jsxFileName = \"/Users/Nas/Desktop/Thinkful/static-playlist/src/Playlists/Playlist-Display.js\";\nimport React, { Component } from 'react';\nimport Playlist from './Playlist';\nimport './Playlist-Display.css';\nimport playStore from '../playStore';\nimport songStore from '../songStore';\nexport default class PlaylistDisplay extends Component {\n  // _isMounted = false;\n  constructor(props) {\n    super(props);\n\n    this.setPlaylistId = playlistId => {\n      this.setState({\n        playlistId\n      });\n    };\n\n    this.setPlaylist = playlist => {\n      this.setState({\n        playlist\n      });\n    };\n\n    this.addSongs = song => {\n      this.setState({\n        song\n      });\n    };\n\n    this.fetcher = () => {\n      let playlistId = this.props.match.params.playlistId;\n      console.log(playlistId);\n      let playlist = window.globe.playStore.find(playlist => {\n        console.log(playlist);\n        return playlist.id == this.props.match.params.playlistId;\n      });\n      console.log(playlist);\n      console.log(songStore);\n      this.setPlaylist(playlist);\n      let runtime = 0;\n      let songArray = [];\n      let chosen = [];\n\n      while (runtime < playlist.length) {\n        let i = Math.floor(Math.random() * 50);\n\n        if (!chosen.includes(i)) {\n          chosen.push(i);\n          let song = {\n            id: songStore[i].id,\n            url: songStore[i].url,\n            name: songStore[i].title,\n            length: songStore[i].length,\n            explicit: songStore[i].explicit\n          };\n          songArray.push(song);\n          runtime += song.length;\n        } else {}\n      }\n\n      this.addSongs(songArray);\n      console.log(songArray);\n    };\n\n    this.mounter = value => {\n      let playlistOut = value.playlists.find(playlist => {\n        return playlist.id === this.props.match.params.playlistId;\n      });\n      console.log(playlistOut);\n      this.setPlaylist(playlistOut);\n    };\n\n    this.state = {\n      playlistId: this.props.match.params.playlistId,\n      playlist: null,\n      song: [],\n      isFlushed: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetcher();\n  }\n\n  render() {\n    if (this.state.playlist === null) return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 50\n      }\n    }, \"Loading..\");\n    return /*#__PURE__*/React.createElement(Playlist, {\n      playlist: this.state.playlist,\n      songs: this.state.song,\n      clicker: this.fetcher,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/Nas/Desktop/Thinkful/static-playlist/src/Playlists/Playlist-Display.js"],"names":["React","Component","Playlist","playStore","songStore","PlaylistDisplay","constructor","props","setPlaylistId","playlistId","setState","setPlaylist","playlist","addSongs","song","fetcher","match","params","console","log","window","globe","find","id","runtime","songArray","chosen","length","i","Math","floor","random","includes","push","url","name","title","explicit","mounter","value","playlistOut","playlists","state","isFlushed","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Playlist from './Playlist'\nimport './Playlist-Display.css'\nimport playStore from '../playStore'\nimport songStore from '../songStore'\n\n\n\nexport default class PlaylistDisplay extends Component {\n    // _isMounted = false;\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            playlistId: this.props.match.params.playlistId,\n            playlist: null,\n            song: [],\n            isFlushed: false\n        }\n    }\n\n    setPlaylistId = (playlistId) => {\n        this.setState({ playlistId })\n    }\n\n    setPlaylist = (playlist) => {\n        this.setState({ playlist })\n    }\n\n    addSongs = (song) => {\n        this.setState({\n            song\n        })\n    }\n\n    fetcher = () => {\n        let playlistId = this.props.match.params.playlistId\n        console.log(playlistId)\n\n        let playlist = window.globe.playStore.find(playlist => {\n            console.log(playlist)\n            return playlist.id == this.props.match.params.playlistId\n        })\n        console.log(playlist)\n        console.log(songStore)\n        this.setPlaylist(playlist)\n        let runtime = 0\n        let songArray = []\n        let chosen = []\n\n        while (runtime < playlist.length) {\n            let i = Math.floor(Math.random() * 50);\n\n            if (!chosen.includes(i)) {\n                chosen.push(i)\n\n                let song = {\n                    id: songStore[i].id,\n                    url: songStore[i].url,\n                    name: songStore[i].title,\n                    length: songStore[i].length,\n                    explicit: songStore[i].explicit,\n                }\n                songArray.push(song)\n                runtime += song.length\n            }\n            else {\n            }\n\n        }\n        this.addSongs(songArray)\n        console.log(songArray)\n\n    }\n\n    componentDidMount() {\n        this.fetcher()\n\n    }\n\n    mounter = (value) => {\n        let playlistOut = value.playlists.find(playlist => {\n            return playlist.id === this.props.match.params.playlistId\n        })\n        console.log(playlistOut)\n        this.setPlaylist(playlistOut)\n    }\n\n\n    render() {\n        if (this.state.playlist === null) return <h1>Loading..</h1>;\n\n\n        return (\n\n            <Playlist playlist={this.state.playlist} songs={this.state.song} clicker={this.fetcher} />\n\n\n        )\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}